"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[2560],{9916:(e,n,a)=>{a.d(n,{xA:()=>s,yg:()=>y});var t=a(3696);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),d=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},s=function(e){var n=d(e.components);return t.createElement(p.Provider,{value:n},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=d(a),u=i,y=g["".concat(p,".").concat(u)]||g[u]||m[u]||r;return a?t.createElement(y,o(o({ref:n},s),{},{components:a})):t.createElement(y,o({ref:n},s))}));function y(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[g]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5720:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=a(8102),i=(a(3696),a(9916));const r={title:"Adding jobs through SQL",sidebar_position:70},o=void 0,l={unversionedId:"sql-add-job",id:"sql-add-job",title:"Adding jobs through SQL",description:"You can schedule jobs directly in the database, e.g. from a trigger or function,",source:"@site/docs/sql-add-job.md",sourceDirName:".",slug:"/sql-add-job",permalink:"/docs/sql-add-job",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/sql-add-job.md",tags:[],version:"current",sidebarPosition:70,frontMatter:{title:"Adding jobs through SQL",sidebar_position:70},sidebar:"tutorialSidebar",previous:{title:"TypeScript",permalink:"/docs/typescript"},next:{title:"Job key",permalink:"/docs/job-key"}},p={},d=[{value:"<code>graphile_worker.add_job()</code>",id:"graphile_workeradd_job",level:2},{value:"Example: simple trigger",id:"example-simple-trigger",level:3},{value:"Example: one trigger function to rule them all",id:"example-one-trigger-function-to-rule-them-all",level:3},{value:"<code>graphile_worker.add_jobs()</code>",id:"graphile_workeradd_jobs",level:2}],s={toc:d},g="wrapper";function m(e){let{components:n,...a}=e;return(0,i.yg)(g,(0,t.A)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"You can schedule jobs directly in the database, e.g. from a trigger or function,\nor by calling SQL from your application code. You do this using the\n",(0,i.yg)("inlineCode",{parentName:"p"},"graphile_worker.add_job")," function (or the experimental\n",(0,i.yg)("inlineCode",{parentName:"p"},"graphile_worker.add_jobs")," function for bulk inserts, see\n",(0,i.yg)("a",{parentName:"p",href:"#graphile_workeradd_jobs"},"below"),")."),(0,i.yg)("h2",{id:"graphile_workeradd_job"},(0,i.yg)("inlineCode",{parentName:"h2"},"graphile_worker.add_job()")),(0,i.yg)("p",null,"NOTE: the ",(0,i.yg)("a",{parentName:"p",href:"/docs/library/add-job"},(0,i.yg)("inlineCode",{parentName:"a"},"addJob"))," JavaScript method simply defers to\nthis underlying ",(0,i.yg)("inlineCode",{parentName:"p"},"add_job")," SQL function."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"add_job")," accepts the following parameters (in this order):"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"identifier")," ","\u2014"," the only ",(0,i.yg)("strong",{parentName:"li"},"required")," field, indicates the name of the\ntask executor to run (omit the ",(0,i.yg)("inlineCode",{parentName:"li"},".js")," suffix!)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"payload")," ","\u2014"," a JSON object with information to tell the task executor\nwhat to do, or an array of one or more of these objects for ","\u201c","batch\njobs","\u201d"," (defaults to an empty object)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"queue_name")," ","\u2014"," if you want certain tasks to run one at a time, add them\nto the same named queue (defaults to ",(0,i.yg)("inlineCode",{parentName:"li"},"null"),")."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"run_at")," ","\u2014"," a timestamp after which to run the job; defaults to now."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"max_attempts")," ","\u2014"," if this task fails, how many times should we retry it?\n(defaults to ",(0,i.yg)("inlineCode",{parentName:"li"},"25"),". Must be castable to ",(0,i.yg)("inlineCode",{parentName:"li"},"smallint"),")."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"job_key")," ","\u2014"," unique identifier for the job, used to replace, update or\nremove it later if needed (see\n",(0,i.yg)("a",{parentName:"li",href:"/docs/job-key#replacingupdating-jobs"},"Replacing and updating jobs")," and\n",(0,i.yg)("a",{parentName:"li",href:"/docs/job-key#removing-jobs"},"removing jobs"),"); can also be used for\nde-duplication."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"priority")," ","\u2014"," an integer representing the jobs priority. Jobs are\nexecuted in numerically ascending order of priority (jobs with a numerically\nsmaller priority are run first). Defaults to ",(0,i.yg)("inlineCode",{parentName:"li"},"0"),". Must be castable to\n",(0,i.yg)("inlineCode",{parentName:"li"},"smallint"),"."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"flags")," ","\u2014"," an optional text array (",(0,i.yg)("inlineCode",{parentName:"li"},"text[]"),") representing a flags to\nattach to the job. Can be used alongside the ",(0,i.yg)("inlineCode",{parentName:"li"},"forbiddenFlags")," option in\nlibrary mode to implement complex rate limiting or other behaviors which\nrequiring skipping jobs at runtime (see\n",(0,i.yg)("a",{parentName:"li",href:"/docs/forbidden-flags"},"Forbidden flags"),")."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"job_key_mode")," ","\u2014"," when ",(0,i.yg)("inlineCode",{parentName:"li"},"job_key")," is specified, this setting indicates\nwhat should happen when an existing job is found with the same job key:",(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"replace")," (default) ","\u2014"," all job parameters are updated to the new\nvalues, including the ",(0,i.yg)("inlineCode",{parentName:"li"},"run_at")," (inserts new job if matching job is locked)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"preserve_run_at")," ","\u2014"," all job parameters are updated to the new values,\nexcept for ",(0,i.yg)("inlineCode",{parentName:"li"},"run_at")," which maintains the previous value (inserts new job if\nmatching job is locked)."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"unsafe_dedupe")," ","\u2014"," only inserts the job if no existing job (whether or\nnot it is locked or has failed permanently) with matching key is found; does\nnot update the existing job.")))),(0,i.yg)("p",null,"Typically you","'","ll want to set the ",(0,i.yg)("inlineCode",{parentName:"p"},"identifier")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"payload"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT graphile_worker.add_job(\n  'send_email',\n  json_build_object(\n    'to', 'someone@example.com',\n    'subject', 'graphile-worker test'\n  )\n);\n")),(0,i.yg)("p",null,"It","'","s recommended that you use\n",(0,i.yg)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-syntax-calling-funcs.html#SQL-SYNTAX-CALLING-FUNCS-NAMED"},"PostgreSQL","'","s named parameters"),"\nfor the other parameters so that you only need specify the arguments you're\nusing:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT graphile_worker.add_job('reminder', run_at := NOW() + INTERVAL '2 days');\n")),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"If you want to run a job after a variable number of seconds according to the\ndatabase time (rather than the application time), you can use interval\nmultiplication; see ",(0,i.yg)("inlineCode",{parentName:"p"},"run_at")," in this example:"),(0,i.yg)("pre",{parentName:"admonition"},(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT graphile_worker.add_job(\n  $1,\n  payload := $2,\n  queue_name := $3,\n  max_attempts := $4,\n  run_at := NOW() + ($5 * INTERVAL '1 second')\n);\n"))),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},(0,i.yg)("inlineCode",{parentName:"p"},"graphile_worker.add_job(...)")," requires database owner privileges to execute. To\nallow lower-privileged users to call it, wrap it inside a PostgreSQL function\nmarked as ",(0,i.yg)("inlineCode",{parentName:"p"},"SECURITY DEFINER")," so that it will run with the same privileges as the\nmore powerful user that defined it. (Be sure that this function performs any\naccess checks that are necessary.)")),(0,i.yg)("h3",{id:"example-simple-trigger"},"Example: simple trigger"),(0,i.yg)("p",null,"This snippet creates a trigger function which adds a job to execute\n",(0,i.yg)("inlineCode",{parentName:"p"},"task_identifier_here")," when a new row is inserted into ",(0,i.yg)("inlineCode",{parentName:"p"},"my_table"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION my_table_created() RETURNS trigger AS $$\nBEGIN\n  PERFORM graphile_worker.add_job('task_identifier_here', json_build_object('id', NEW.id));\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql VOLATILE;\n\nCREATE TRIGGER trigger_name AFTER INSERT ON my_table FOR EACH ROW EXECUTE PROCEDURE my_table_created();\n")),(0,i.yg)("h3",{id:"example-one-trigger-function-to-rule-them-all"},"Example: one trigger function to rule them all"),(0,i.yg)("p",null,"If your tables are all defined with a single primary key named ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," then you can\ndefine a more convenient dynamic trigger function which can be called from\nmultiple triggers for multiple tables to quickly schedule jobs."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE FUNCTION trigger_job() RETURNS trigger AS $$\nBEGIN\n  PERFORM graphile_worker.add_job(TG_ARGV[0], json_build_object(\n    'schema', TG_TABLE_SCHEMA,\n    'table', TG_TABLE_NAME,\n    'op', TG_OP,\n    'id', (CASE WHEN TG_OP = 'DELETE' THEN OLD.id ELSE NEW.id END)\n  ));\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql VOLATILE;\n")),(0,i.yg)("p",null,"You might use this trigger like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TRIGGER send_verification_email\n  AFTER INSERT ON user_emails\n  FOR EACH ROW\n  WHEN (NEW.verified is false)\n  EXECUTE PROCEDURE trigger_job('send_verification_email');\nCREATE TRIGGER user_changed\n  AFTER INSERT OR UPDATE OR DELETE ON users\n  FOR EACH ROW\n  EXECUTE PROCEDURE trigger_job('user_changed');\nCREATE TRIGGER generate_pdf\n  AFTER INSERT ON pdfs\n  FOR EACH ROW\n  EXECUTE PROCEDURE trigger_job('generate_pdf');\nCREATE TRIGGER generate_pdf_update\n  AFTER UPDATE ON pdfs\n  FOR EACH ROW\n  WHEN (NEW.title IS DISTINCT FROM OLD.title)\n  EXECUTE PROCEDURE trigger_job('generate_pdf');\n")),(0,i.yg)("h2",{id:"graphile_workeradd_jobs"},(0,i.yg)("inlineCode",{parentName:"h2"},"graphile_worker.add_jobs()")),(0,i.yg)("admonition",{title:"Experimental",type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"This API may change in a semver minor release.")),(0,i.yg)("p",null,"For bulk insertion of jobs, we","'","ve introduced the ",(0,i.yg)("inlineCode",{parentName:"p"},"graphile_worker.add_jobs"),"\nfunction. It accepts the following options:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"specs")," - an array of ",(0,i.yg)("inlineCode",{parentName:"li"},"graphile_worker.job_spec")," objects"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"job_key_preserve_run_at")," - an optional boolean detailing if the ",(0,i.yg)("inlineCode",{parentName:"li"},"run_at"),"\nshould be preserved when the same ",(0,i.yg)("inlineCode",{parentName:"li"},"job_key")," is seen again")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"job_spec")," object has the following properties, all of which correspond with\nthe ",(0,i.yg)("inlineCode",{parentName:"p"},"add_job")," option of the same name above."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"identifier")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"payload")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"queue_name")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"run_at")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"max_attempts")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"job_key")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"priority")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"flags"))),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},(0,i.yg)("inlineCode",{parentName:"p"},"job_key_mode='unsafe_dedupe'")," is not supported in ",(0,i.yg)("inlineCode",{parentName:"p"},"add_jobs")," ","\u2014"," you must\nadd jobs one at a time using ",(0,i.yg)("inlineCode",{parentName:"p"},"add_job")," to use that. The equivalent of\n",(0,i.yg)("inlineCode",{parentName:"p"},"job_key_mode='replace'")," is enabled by default, to change this to the same\nbehavior as ",(0,i.yg)("inlineCode",{parentName:"p"},"job_key_mode='preserve_run_at'")," you should set\n",(0,i.yg)("inlineCode",{parentName:"p"},"job_key_preserve_run_at")," to ",(0,i.yg)("inlineCode",{parentName:"p"},"true"),".")))}m.isMDXComponent=!0}}]);