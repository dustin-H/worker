"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[8829],{9916:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>g});var n=t(3696);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?n.createElement(g,a(a({ref:r},c),{},{components:t})):n.createElement(g,a({ref:r},c))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5288:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=t(8102),o=(t(3696),t(9916));const i={title:"Pro configuration",sidebar_position:1e3},a=void 0,l={unversionedId:"pro/config",id:"pro/config",title:"Pro configuration",description:"Worker Pro configuration goes into your preset (typically stored in a",source:"@site/docs/pro/config.md",sourceDirName:"pro",slug:"/pro/config",permalink:"/docs/pro/config",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/pro/config.md",tags:[],version:"current",sidebarPosition:1e3,frontMatter:{title:"Pro configuration",sidebar_position:1e3},sidebar:"tutorialSidebar",previous:{title:"Crashed worker recovery",permalink:"/docs/pro/recovery"},next:{title:"CLI",permalink:"/docs/cli/"}},s={},p=[{value:"Options",id:"options",level:2},{value:"worker.heartbeatInterval",id:"workerheartbeatinterval",level:3},{value:"worker.sweepInterval",id:"workersweepinterval",level:3},{value:"worker.sweepThreshold",id:"workersweepthreshold",level:3},{value:"worker.maxMigrationWaitTime",id:"workermaxmigrationwaittime",level:3},{value:"Example",id:"example",level:2}],c={toc:p},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.yg)(u,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Worker Pro configuration goes into your preset (typically stored in a\n",(0,o.yg)("inlineCode",{parentName:"p"},"graphile.config.ts")," or similar file), inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"worker")," scope; see\n",(0,o.yg)("a",{parentName:"p",href:"/docs/config"},"Configuration")," for more details on this file."),(0,o.yg)("h2",{id:"options"},"Options"),(0,o.yg)("p",null,"Worker Pro adds the following to the Graphile Worker options:"),(0,o.yg)("h3",{id:"workerheartbeatinterval"},"worker.heartbeatInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"How often, in milliseconds, a worker should check in as active. Defaults to 1\nminute."),(0,o.yg)("h3",{id:"workersweepinterval"},"worker.sweepInterval"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"How often, in milliseconds, to check for and release inactive workers. Defaults\nto 3 minutes."),(0,o.yg)("h3",{id:"workersweepthreshold"},"worker.sweepThreshold"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"How many milliseconds, since the last emitted heartbeat, may elapse before that\nworker is considered inactive and eligible to be force-released. Defaults to 4\nhours, but we recommend you set it to a shorter time ","\u2014"," how long you think\na legitimate networking interruption might last where tasks may still\nsuccessfully complete."),(0,o.yg)("h3",{id:"workermaxmigrationwaittime"},"worker.maxMigrationWaitTime"),(0,o.yg)("p",null,"Type: ",(0,o.yg)("inlineCode",{parentName:"p"},"number | undefined")),(0,o.yg)("p",null,"How long, in milliseconds, to wait for active old workers to cleanly exit before\nperforming the migration to the newer database schema anyway. Defaults to 4\nhours, but we recommend you set it to a smaller duration: the longest time you\nexpect one of your jobs to take to execute, plus a bit of padding."),(0,o.yg)("h2",{id:"example"},"Example"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="graphile.config.ts"',title:'"graphile.config.ts"'},'import "graphile-config";\nimport "graphile-worker";\nimport { WorkerProPreset } from "@graphile-pro/worker";\n\nconst preset: GraphileConfig.Preset = {\n  extends: [WorkerProPreset],\n  worker: {\n    /* ... regular configuration here ...*/\n\n    /* Example Worker Pro configuration options: */\n\n    // Check in as active once per minute\n    heartbeatInterval: 60 * 1000,\n\n    // Check for and force-release inactive workers every 3 minutes\n    sweepInterval: 3 * 60 * 1000,\n\n    // Workers are deemed "inactive" 10 minutes after their last heartbeat\n    sweepThreshold: 10 * 60 * 1000,\n\n    // If old workers haven\'t exited within 30 minutes, go ahead and perform\n    // the migration anyway:\n    maxMigrationWaitTime: 30 * 60 * 1000,\n  },\n};\n\nexport default preset;\n')))}d.isMDXComponent=!0}}]);