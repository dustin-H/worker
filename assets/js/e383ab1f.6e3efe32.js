"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[7116],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=i,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||o;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(5773),i=(n(7378),n(5318));const o={title:"Task executors",sidebar_position:45,toc_max_heading_level:5},r=void 0,l={unversionedId:"tasks",id:"tasks",title:"Task executors",description:"A &ldquo;job&rdquo; is a description of a single &ldquo;job to be done&rdquo;",source:"@site/docs/tasks.md",sourceDirName:".",slug:"/tasks",permalink:"/docs/tasks",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/tasks.md",tags:[],version:"current",sidebarPosition:45,frontMatter:{title:"Task executors",sidebar_position:45,toc_max_heading_level:5},sidebar:"tutorialSidebar",previous:{title:"Connection strings",permalink:"/docs/connection-string"},next:{title:"Worker Pro!",permalink:"/docs/pro/"}},s={},p=[{value:"Task executor function",id:"task-executor-function",level:2},{value:"Example task executors",id:"example-task-executors",level:2},{value:"The <code>tasks/</code> folder",id:"the-tasks-folder",level:2},{value:"Loading JavaScript files",id:"loading-javascript-files",level:2},{value:"Loading TypeScript files",id:"loading-typescript-files",level:3},{value:"Loading executable files",id:"loading-executable-files",level:2},{value:"Environmental variables",id:"environmental-variables",level:3},{value:"Payload format: &quot;json&quot;",id:"payload-format-json",level:3},{value:"Handling batch jobs",id:"handling-batch-jobs",level:2},{value:"<code>helpers</code>",id:"helpers",level:2},{value:"<code>helpers.logger</code>",id:"helperslogger",level:3},{value:"<code>helpers.withPgClient()</code>",id:"helperswithpgclient",level:3},{value:"<code>helpers.addJob()</code>",id:"helpersaddjob",level:3}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A ","\u201c","job","\u201d"," is a description of a single ","\u201c","job to be done","\u201d","\nstored into the database via the JS ",(0,i.kt)("inlineCode",{parentName:"p"},"addJob()")," function or SQL\n",(0,i.kt)("inlineCode",{parentName:"p"},"graphile_worker.add_job()")," function."),(0,i.kt)("p",null,"A ","\u201c","task","\u201d"," is the type of work that a job may take, for example\n","\u201c","send email","\u201d",", ","\u201c","convert image","\u201d"," or ","\u201c","process\nwebhook","\u201d",". A ","\u201c","task identifier","\u201d"," is a unique name given to a\ntask, for example ",(0,i.kt)("inlineCode",{parentName:"p"},"send_email")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"convert_image"),". A ","\u201c","task executor","\u201d","\nis the function to execute when a job with the associated task identifier is\nfound."),(0,i.kt)("h2",{id:"task-executor-function"},"Task executor function"),(0,i.kt)("p",null,"A task executor is a simple async JS function which: receives as input the job\npayload and a collection of helpers, does the work, and then returns. If the\ntask executor returns successfully then the job is deemed a success and is\ndeleted from the queue (unless this is a ","\u201c","batch job","\u201d","). If it throws\nan error (or, equivalently, rejects the promise) then the job is deemed a\nfailure and the task is rescheduled using an exponential-backoff algorithm."),(0,i.kt)("p",null,"Each task function is passed two arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"payload")," ","\u2014"," the (JSON) payload you passed when calling\n",(0,i.kt)("inlineCode",{parentName:"li"},"graphile_worker.add_job(...)")," in the database, or ",(0,i.kt)("inlineCode",{parentName:"li"},"addJob(...)")," via the JS\nAPI"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"helpers")," (see ",(0,i.kt)("a",{parentName:"li",href:"#helpers"},(0,i.kt)("inlineCode",{parentName:"a"},"helpers"))," below) ","\u2014"," an object containing:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"logger")," ","\u2014"," a scoped ",(0,i.kt)("a",{parentName:"li",href:"/docs/library/logger"},"Logger")," instance, to aid\ntracing/debugging"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"job")," ","\u2014"," the whole job (including ",(0,i.kt)("inlineCode",{parentName:"li"},"uuid"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"attempts"),", etc) ","\u2014"," you\nshouldn't need this"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getQueueName()")," ","\u2014"," get the name of the queue the job is in (may or may\nnot return a promise - recommend you always ",(0,i.kt)("inlineCode",{parentName:"li"},"await")," it)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"abortSignal")," ","\u2014"," could be an ",(0,i.kt)("inlineCode",{parentName:"li"},"AbortSignal")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"undefined"),"; if set, use\nthis to abort your task early on graceful shutdown (can be passed to a\nnumber of asynchronous Node.js methods)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"withPgClient")," ","\u2014"," a helper to use to get a database client"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query(sql, values)")," ","\u2014"," a convenience wrapper for\n",(0,i.kt)("inlineCode",{parentName:"li"},"withPgClient(pgClient => pgClient.query(sql, values))")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"addJob")," ","\u2014"," a helper to schedule a job")))),(0,i.kt)("admonition",{title:"Important",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Your jobs must wait for all asynchronous work to be completed before returning,\notherwise we might think they were successful prematurely. Every promise that a\ntask executor triggers must be ",(0,i.kt)("inlineCode",{parentName:"p"},"await"),"-ed; task executors ",(0,i.kt)("em",{parentName:"p"},"should not")," create\n","\u201c","untethered","\u201d"," promises.")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"We automatically retry the job if it fails, so it","'","s often sensible to split\na large job into multiple smaller jobs, this also allows them to run in parallel\nresulting in faster execution. This is particularly important for tasks that are\nnot idempotent (i.e. running them a second time will have extra side effects)\n","\u2014"," for example sending emails.")),(0,i.kt)("h2",{id:"example-task-executors"},"Example task executors"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="tasks/task_1.js"',title:'"tasks/task_1.js"'},"module.exports = async (payload) => {\n  await doMyLogicWith(payload);\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="tasks/task_2.js"',title:'"tasks/task_2.js"'},"module.exports = async (payload, helpers) => {\n  // async is optional, but best practice\n  helpers.logger.debug(`Received ${JSON.stringify(payload)}`);\n};\n")),(0,i.kt)("h2",{id:"the-tasks-folder"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"tasks/")," folder"),(0,i.kt)("p",null,"When you run ",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-worker"),", it will look in the current directory for a\nfolder called ",(0,i.kt)("inlineCode",{parentName:"p"},"tasks"),", and it will recursively look for files suitable to run as\ntasks. File names excluding the extension and folder names must only use\nalphanumeric characters, underscores and dashes (",(0,i.kt)("inlineCode",{parentName:"p"},"/^[A-Za-z0-9_-]+$/"),") to be\nrecognized. Graphile Worker will then attempt to load the file as a task\nexecutor; the task identifier for this will be all the folders and the file name\n(excluding the extension) joined with ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," characters; e.g.\n",(0,i.kt)("inlineCode",{parentName:"p"},"tasks/send_notification.js")," would get the identifier ",(0,i.kt)("inlineCode",{parentName:"p"},"send_notification")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"tasks/users/emails/verify.js")," would get the identifier ",(0,i.kt)("inlineCode",{parentName:"p"},"users/emails/verify"),".\nHow the file is loaded as a task executor will depend on the file in question\nand the plugins you have loaded."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"current directory\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 node_modules\n\u2514\u2500\u2500 tasks\n    \u251c\u2500\u2500 send_notification.js\n    \u251c\u2500\u2500 generate_pdf.js\n    \u2514\u2500\u2500 users\n        \u251c\u2500\u2500 congratulate.js\n        \u2514\u2500\u2500 emails\n            \u251c\u2500\u2500 verify.js\n            \u2514\u2500\u2500 send_otp.js\n")),(0,i.kt)("h2",{id:"loading-javascript-files"},"Loading JavaScript files"),(0,i.kt)("p",null,"Out of the box, Graphile Worker will load ",(0,i.kt)("inlineCode",{parentName:"p"},".js"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".cjs")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".mjs")," files using\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"import()")," function. If the file is a CommonJS module then Worker will\nexpect ",(0,i.kt)("inlineCode",{parentName:"p"},"module.exports")," to be the task executor function; if the file is an\nECMAScript module (ESM) then Worker will expect the default export to be the\ntask executor function."),(0,i.kt)("p",null,"Via plugins, support for other ways of loading task files can be added; look at\nthe source code of ",(0,i.kt)("inlineCode",{parentName:"p"},"LoadTaskFromJsPlugin.ts")," for inspiration."),(0,i.kt)("h3",{id:"loading-typescript-files"},"Loading TypeScript files"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"For performance and memory usage reasons, we recommend that you compile\nTypeScript files to JS and then have Graphile Worker load the JS files.")),(0,i.kt)("p",null,"To load TypeScript files directly as tasks (without precompilation), one way is\nto:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"install ",(0,i.kt)("inlineCode",{parentName:"li"},"ts-node"),","),(0,i.kt)("li",{parentName:"ol"},"add ",(0,i.kt)("inlineCode",{parentName:"li"},'".ts"')," to the ",(0,i.kt)("inlineCode",{parentName:"li"},"worker.fileExtensions")," list in your ",(0,i.kt)("inlineCode",{parentName:"li"},"graphile.config.ts"),","),(0,i.kt)("li",{parentName:"ol"},"run Graphile Worker with the environmental variable\n",(0,i.kt)("inlineCode",{parentName:"li"},'NODE_OPTIONS="--loader ts-node/esm"')," set.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Example graphile.config.ts"',title:'"Example','graphile.config.ts"':!0},'import type { GraphileConfig } from "graphile-config";\nimport type {} from "graphile-worker";\n\nconst preset: GraphileConfig.Preset = {\n  worker: {\n    connectionString: process.env.DATABASE_URL,\n    concurrentJobs: 5,\n    fileExtensions: [".js", ".cjs", ".mjs", ".ts", ".cts", ".mts"],\n  },\n};\n\nexport default preset;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=\"Running graphile-worker with '--loader ts-node/esm'\"",title:'"Running',"graphile-worker":!0,with:!0,"'--loader":!0,"ts-node/esm'\"":!0},'NODE_OPTIONS="--loader ts-node/esm" graphile-worker -c ...\n# OR: node --loader ts-node/esm node_modules/.bin/graphile-worker -c ...\n')),(0,i.kt)("h2",{id:"loading-executable-files"},"Loading executable files"),(0,i.kt)("admonition",{title:"Experimental",type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"This feature is currently experimental.")),(0,i.kt)("p",null,"If you're running on Linux or Unix (including macOS) then if Graphile Worker\nfinds an executable file inside of ",(0,i.kt)("inlineCode",{parentName:"p"},"tasks/")," it will create a task executor for\nit. When a task of this kind is found, Graphile Worker will execute the file\nsetting the relevant environmental variables and passing in the payload\naccording to the encoding. If the executable exits with code ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," then Graphile\nWorker will see this as success, all other exit codes are seen as failure."),(0,i.kt)("h3",{id:"environmental-variables"},"Environmental variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_PAYLOAD_FORMAT")," ","\u2014"," the encoding that Graphile Worker\nuses to pass the payload to the binary. Currently this will be the string\n",(0,i.kt)("inlineCode",{parentName:"li"},"json"),", but you should check this before processing the payload in case the\nformat changes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_TASK_IDENTIFIER")," ","\u2014"," the identifier for the task this\nfile represents (useful if you want multiple task identifiers to be served by\nthe same binary file, e.g. via symlinks)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_ID")," ","\u2014"," the ID of the job in the database"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_KEY")," ","\u2014"," the ",(0,i.kt)("a",{parentName:"li",href:"/docs/job-key"},"Job Key")," the job was\ncreated with, if any"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_ATTEMPTS")," ","\u2014"," the number of attempts that we've made\nto execute this job; starts at 1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_MAX_ATTEMPTS")," ","\u2014"," the maximum number of attempts\nwe'll try"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_PRIORITY")," ","\u2014"," the numeric priority the job was\ncreated with"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GRAPHILE_WORKER_JOB_RUN_AT")," ","\u2014"," when the job is scheduled to run (can be\nused to detect delayed jobs)")),(0,i.kt)("h3",{id:"payload-format-json"},'Payload format: "json"'),(0,i.kt)("p",null,"In the JSON payload format, your binary will be fed via stdin\n",(0,i.kt)("inlineCode",{parentName:"p"},"JSON.stringify({payload})"),"; for example, if you did\n",(0,i.kt)("inlineCode",{parentName:"p"},"addJob('myScript', {mol: 42})")," then your ",(0,i.kt)("inlineCode",{parentName:"p"},"myScript")," task would be sent\n",(0,i.kt)("inlineCode",{parentName:"p"},'{"payload":{"mol":42}}')," via stdin."),(0,i.kt)("h2",{id:"handling-batch-jobs"},"Handling batch jobs"),(0,i.kt)("p",null,"If the payload is an array, then ",(0,i.kt)("em",{parentName:"p"},"optionally")," your task may choose to return an\narray of the same length, the entries in which are promises. Should any of these\npromises reject, then the job will be re-enqueued, but the payload will be\noverwritten to only contain the entries associated with the rejected promises\n","\u2014"," i.e. the successful entries will be removed."),(0,i.kt)("h2",{id:"helpers"},(0,i.kt)("inlineCode",{parentName:"h2"},"helpers")),(0,i.kt)("h3",{id:"helperslogger"},(0,i.kt)("inlineCode",{parentName:"h3"},"helpers.logger")),(0,i.kt)("p",null,"So that you may redirect logs to your preferred logging provider, we have\nenabled you to supply your own logging provider. Overriding this is currently\nonly available in library mode (see ",(0,i.kt)("a",{parentName:"p",href:"/docs/library/logger"},"Logger"),"). We then wrap\nthis logging provider with a helper class to ease debugging; the helper class\nhas the following methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error(message, meta?)"),": for logging errors, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"console.error")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"warn(message, meta?)"),": for logging warnings, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"console.warn")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"info(message, meta?)"),": for logging informational messages, similar to\n",(0,i.kt)("inlineCode",{parentName:"li"},"console.info")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"debug(message, meta?)"),": to aid with debugging, similar to ",(0,i.kt)("inlineCode",{parentName:"li"},"console.log")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scope(additionalScope)"),": returns a new ",(0,i.kt)("inlineCode",{parentName:"li"},"Logger")," instance with additional\nscope information")),(0,i.kt)("h3",{id:"helperswithpgclient"},(0,i.kt)("inlineCode",{parentName:"h3"},"helpers.withPgClient()")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," gets a ",(0,i.kt)("inlineCode",{parentName:"p"},"pgClient")," from the pool, calls\n",(0,i.kt)("inlineCode",{parentName:"p"},"await callback(pgClient)"),", and finally releases the client and returns the\nresult of ",(0,i.kt)("inlineCode",{parentName:"p"},"callback"),". This workflow can make testing your tasks easier."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const {\n  rows: [row],\n} = await withPgClient((pgClient) => pgClient.query("select 1 as one"));\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Neither ",(0,i.kt)("inlineCode",{parentName:"p"},"withPgClient")," nor ",(0,i.kt)("inlineCode",{parentName:"p"},"query")," methods create a database transaction. If you\nneed a database transaction, you should do so yourself, but please note that\nkeeping transactions open may decrease Graphile Worker","'","s performance due to\nincreasing contention over the pool of database clients.")),(0,i.kt)("h3",{id:"helpersaddjob"},(0,i.kt)("inlineCode",{parentName:"h3"},"helpers.addJob()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await helpers.addJob(identifier, payload, options);\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/library/add-job"},(0,i.kt)("inlineCode",{parentName:"a"},"addJob")),"."))}m.isMDXComponent=!0}}]);