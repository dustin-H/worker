"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[5742],{9916:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>y});var n=r(3696);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(r),m=a,y=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return r?n.createElement(y,i(i({ref:t},p),{},{components:r})):n.createElement(y,i({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},588:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=r(8102),a=(r(3696),r(9916));const o={title:"Introduction",sidebar_position:10},i=void 0,l={unversionedId:"index",id:"index",title:"Introduction",description:"Graphile Worker is a job queue which uses PostgreSQL to store jobs, and executes",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/index.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Introduction",sidebar_position:10},sidebar:"tutorialSidebar",next:{title:"Requirements",permalink:"/docs/requirements"}},s={},u=[{value:"Keep it simple",id:"keep-it-simple",level:2},{value:"Reliable",id:"reliable",level:2},{value:"Postgres-centric",id:"postgres-centric",level:2},{value:"Community-funded",id:"community-funded",level:2},{value:"Features",id:"features",level:2}],p={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.yg)(c,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("p",null,'Graphile Worker is a job queue which uses PostgreSQL to store jobs, and executes\nthem on Node.js. A job queue allows you to run jobs (e.g. sending emails,\nperforming calculations, generating PDFs, etc) "in the background" so that your\nHTTP response/application code is not held up waiting for them to complete.'),(0,a.yg)("h2",{id:"keep-it-simple"},"Keep it simple"),(0,a.yg)("p",null,"The main reason behind Graphile Worker (and not a dedicated job queue) is to\nhelp you to keep your infrastructure simple; when you're working with a small\nnumber of engineers on a project, the more infrastructure you have, the more\ntime you lose to maintenance of that infrastructure, so consolidating your\ninfrastructure can make a lot of sense. Graphile Worker focuses on performance\nto ensure that you can use it as a job queue until your engineering team has\ngrown enough that you can afford the time to maintain a dedicated job queue."),(0,a.yg)("h2",{id:"reliable"},"Reliable"),(0,a.yg)("p",null,"As you would expect from a job queue, Graphile Worker ensures that your jobs\nwill not get lost (thanks to Postgres' transactional guarantees), and that each\njob will execute at least once. Most jobs will execute exactly once; but if\nsomething goes wrong (either with the job itself, with worker, or with your\ninfrastructure) then Graphile Worker will automatically retry the job at a later\ntime, following exponential backoff."),(0,a.yg)("h2",{id:"postgres-centric"},"Postgres-centric"),(0,a.yg)("p",null,"Though Graphile Worker can be executed as a regular Node.js module, its\nPostgres-centric ethos means that it is exceptionally well suited to projects\nwhere jobs need to be created from inside the database (e.g. via triggers, or\nstored procedures); i.e. it pairs beautifully with\n",(0,a.yg)("a",{parentName:"p",href:"https://www.graphile.org/postgraphile/"},"PostGraphile"),",\n",(0,a.yg)("a",{parentName:"p",href:"http://postgrest.org/"},"PostgREST"),", and any other database-centric application\nframework."),(0,a.yg)("h2",{id:"community-funded"},"Community-funded"),(0,a.yg)("p",null,"Like all of Graphile's open source software, Graphile Worker is community\nfunded: we rely on sponsorship and donations to keep maintaining the project. If\nyou find the project useful and want to help it keep improving, please consider\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/sponsors/benjie"},"sponsoring @Benjie"),"."),(0,a.yg)("h2",{id:"features"},"Features"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Standalone and embedded modes"),(0,a.yg)("li",{parentName:"ul"},"Designed to be used both from JavaScript or directly in the database"),(0,a.yg)("li",{parentName:"ul"},"Easy to test (recommended: ",(0,a.yg)("inlineCode",{parentName:"li"},"runTaskListOnce")," util)"),(0,a.yg)("li",{parentName:"ul"},"Low latency (typically under 3ms from task schedule to execution, uses\n",(0,a.yg)("inlineCode",{parentName:"li"},"LISTEN"),"/",(0,a.yg)("inlineCode",{parentName:"li"},"NOTIFY")," to be informed of jobs as they're inserted)"),(0,a.yg)("li",{parentName:"ul"},"High performance (uses ",(0,a.yg)("inlineCode",{parentName:"li"},"SKIP LOCKED")," to find jobs to execute, resulting in\nfaster fetches)"),(0,a.yg)("li",{parentName:"ul"},"Small tasks (uses explicit task names / payloads resulting in minimal\nserialisation/deserialisation overhead)"),(0,a.yg)("li",{parentName:"ul"},"Parallel by default"),(0,a.yg)("li",{parentName:"ul"},"Adding jobs to same named queue runs them in series"),(0,a.yg)("li",{parentName:"ul"},"Automatically re-attempts failed jobs with exponential back-off"),(0,a.yg)("li",{parentName:"ul"},"Customizable retry count (default: 25 attempts over ~3 days)"),(0,a.yg)("li",{parentName:"ul"},"Crontab-like scheduling feature for recurring tasks (with optional backfill)"),(0,a.yg)("li",{parentName:"ul"},"Task de-duplication via unique ",(0,a.yg)("inlineCode",{parentName:"li"},"job_key")),(0,a.yg)("li",{parentName:"ul"},"Append data to already enqueued jobs with ","\u2018","batch jobs","\u2019"),(0,a.yg)("li",{parentName:"ul"},"Flexible runtime controls that can be used for complex rate limiting (e.g. via\n",(0,a.yg)("a",{parentName:"li",href:"https://github.com/politics-rewired/graphile-worker-rate-limiter"},"graphile-worker-rate-limiter"),")"),(0,a.yg)("li",{parentName:"ul"},"Open source; liberal MIT license"),(0,a.yg)("li",{parentName:"ul"},"Executes tasks written in Node.js (these can call out to any other language or\nnetworked service)"),(0,a.yg)("li",{parentName:"ul"},"Modern JS with 100% async/await API (no callbacks)"),(0,a.yg)("li",{parentName:"ul"},"Written natively in TypeScript"),(0,a.yg)("li",{parentName:"ul"},"If you're running really lean, you can run Graphile Worker in the same Node\nprocess as your server to keep costs and devops complexity down.")))}d.isMDXComponent=!0}}]);