"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[5708],{5318:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(t),c=a,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return t?r.createElement(k,o(o({ref:n},u),{},{components:t})):r.createElement(k,o({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5203:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(5773),a=(t(7378),t(5318));const i={title:"Library: running jobs",sidebar_position:60,sidebar_label:"Running jobs"},o=void 0,l={unversionedId:"library/run",id:"library/run",title:"Library: running jobs",description:"graphile-worker can be used as a library inside your Node.js application.",source:"@site/docs/library/run.md",sourceDirName:"library",slug:"/library/run",permalink:"/docs/library/run",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/library/run.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Library: running jobs",sidebar_position:60,sidebar_label:"Running jobs"},sidebar:"tutorialSidebar",previous:{title:"Library",permalink:"/docs/library/"},next:{title:"Queueing jobs",permalink:"/docs/library/queue"}},s={},p=[{value:"<code>run()</code>",id:"run",level:2},{value:"<code>runOnce()</code>",id:"runonce",level:2},{value:"<code>runMigrations()</code>",id:"runmigrations",level:2},{value:"<code>RunnerOptions</code>",id:"runneroptions",level:2},{value:"<code>Runner</code>",id:"runner",level:2},{value:"Example: <code>runner.addJob()</code>",id:"example-runneraddjob",level:3},{value:"Example: <code>runner.events</code>",id:"example-runnerevents",level:3}],u={toc:p},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"graphile-worker")," can be used as a library inside your Node.js application.\nThere are two main use cases for this: running jobs, and queueing jobs. Here are\nthe APIs for running jobs."),(0,a.kt)("h2",{id:"run"},(0,a.kt)("inlineCode",{parentName:"h2"},"run()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function run(options: RunnerOptions): Promise<Runner>;\n")),(0,a.kt)("p",null,"Runs until either stopped by a signal event like ",(0,a.kt)("inlineCode",{parentName:"p"},"SIGINT")," or by calling the\n",(0,a.kt)("inlineCode",{parentName:"p"},"stop()")," method on the resolved object."),(0,a.kt)("p",null,"The resolved ","\u2018","Runner","\u2019"," object has a number of helpers on it, see\n",(0,a.kt)("a",{parentName:"p",href:"#runner"},"Runner")," for more information."),(0,a.kt)("h2",{id:"runonce"},(0,a.kt)("inlineCode",{parentName:"h2"},"runOnce()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function runOnce(options: RunnerOptions): Promise<void>;\n")),(0,a.kt)("p",null,"Equivalent to running the CLI with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--once")," flag. The function will run\nuntil there are no runnable jobs left, and then resolve."),(0,a.kt)("h2",{id:"runmigrations"},(0,a.kt)("inlineCode",{parentName:"h2"},"runMigrations()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function runMigrations(options: RunnerOptions): Promise<void>;\n")),(0,a.kt)("p",null,"Equivalent to running the CLI with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--schema-only")," option. Runs the\nmigrations and then resolves."),(0,a.kt)("h2",{id:"runneroptions"},(0,a.kt)("inlineCode",{parentName:"h2"},"RunnerOptions")),(0,a.kt)("p",null,"The following options for these methods are available."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"concurrency"),": The equivalent of the CLI ",(0,a.kt)("inlineCode",{parentName:"li"},"--jobs")," option with the same default\nvalue."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"noHandleSignals"),": If set true, we won","'","t install signal handlers and\nit","'","ll be up to you to handle graceful shutdown of the worker if the\nprocess receives a signal."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pollInterval"),": The equivalent of the CLI ",(0,a.kt)("inlineCode",{parentName:"li"},"--poll-interval")," option with the\nsame default value."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"logger"),": To change how log messages are output you may provide a custom\nlogger; see ",(0,a.kt)("a",{parentName:"li",href:"/docs/library/logger"},(0,a.kt)("inlineCode",{parentName:"a"},"Logger")),"."),(0,a.kt)("li",{parentName:"ul"},"the database is identified through one of these options:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"connectionString"),": A PostgreSQL\n",(0,a.kt)("a",{parentName:"li",href:"/docs/connection-string"},"connection string")," to the database containing the\njob queue, or"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pgPool"),": A ",(0,a.kt)("inlineCode",{parentName:"li"},"pg.Pool")," instance to use."))),(0,a.kt)("li",{parentName:"ul"},"the tasks to execute are identified through one of these options:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"taskDirectory"),": A path string to a directory containing the task handlers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"taskList"),": An object with the task names as keys and a corresponding task\nhandler functions as values."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"schema")," can be used to change the default ",(0,a.kt)("inlineCode",{parentName:"li"},"graphile_worker")," schema to\nsomething else (equivalent to ",(0,a.kt)("inlineCode",{parentName:"li"},"--schema")," on the CLI)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"forbiddenFlags")," see ",(0,a.kt)("a",{parentName:"li",href:"/docs/forbidden-flags"},"Forbidden flags"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"events"),": pass your own ",(0,a.kt)("inlineCode",{parentName:"li"},"new EventEmitter()")," if you want to customize the\noptions, get earlier events (before the runner object resolves), or want to\nget events from alternative Graphile Worker entrypoints."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"noPreparedStatements"),": Set true if you want to prevent the use of prepared\nstatements, for example if you wish to use Graphile Worker with an external\nPostgreSQL connection pool. Enabling this setting may have a small performance\nimpact.")),(0,a.kt)("p",null,"Exactly one of either ",(0,a.kt)("inlineCode",{parentName:"p"},"taskDirectory")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"taskList")," must be provided (except for\n",(0,a.kt)("inlineCode",{parentName:"p"},"runMigrations")," which doesn","'","t require a task list)."),(0,a.kt)("p",null,"One of these must be provided (in order of priority):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pgPool")," pg.Pool instance"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/connection-string"},(0,a.kt)("inlineCode",{parentName:"a"},"connectionString"))," setting"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DATABASE_URL")," envvar"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/libpq-envars.html"},"PostgreSQL environmental variables"),",\nincluding at least ",(0,a.kt)("inlineCode",{parentName:"li"},"PGDATABASE")," (NOTE: not all envvars are supported)")),(0,a.kt)("h2",{id:"runner"},(0,a.kt)("inlineCode",{parentName:"h2"},"Runner")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," method above resolves to a ","\u2018","Runner","\u2019"," object that has the\nfollowing methods and properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"stop(): Promise<void>")," ","\u2014"," stops the runner from accepting new jobs, and\nreturns a promise that resolves when all the in progress tasks (if any) are\ncomplete."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"addJob: AddJobFunction")," ","\u2014"," see ",(0,a.kt)("a",{parentName:"li",href:"/docs/library/add-job"},(0,a.kt)("inlineCode",{parentName:"a"},"addJob")),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"promise: Promise<void>")," ","\u2014"," a promise that resolves once the runner has\ncompleted."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"events: WorkerEvents")," ","\u2014"," a Node.js ",(0,a.kt)("inlineCode",{parentName:"li"},"EventEmitter")," that exposes certain\nevents within the runner (see ",(0,a.kt)("a",{parentName:"li",href:"/docs/worker-events"},(0,a.kt)("inlineCode",{parentName:"a"},"WorkerEvents")),").")),(0,a.kt)("h3",{id:"example-runneraddjob"},"Example: ",(0,a.kt)("inlineCode",{parentName:"h3"},"runner.addJob()")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/library/add-job"},(0,a.kt)("inlineCode",{parentName:"a"},"addJob"))," for more details."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'await runner.addJob("testTask", {\n  thisIsThePayload: true,\n});\n')),(0,a.kt)("h3",{id:"example-runnerevents"},"Example: ",(0,a.kt)("inlineCode",{parentName:"h3"},"runner.events")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/worker-events"},(0,a.kt)("inlineCode",{parentName:"a"},"WorkerEvents"))," for more details."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'runner.events.on("job:success", ({ worker, job }) => {\n  console.log(`Hooray! Worker ${worker.workerId} completed job ${job.id}`);\n});\n')))}m.isMDXComponent=!0}}]);