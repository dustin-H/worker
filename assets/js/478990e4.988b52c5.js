"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[5540],{5318:(e,r,o)=>{o.d(r,{Zo:()=>c,kt:()=>m});var n=o(7378);function t(e,r,o){return r in e?Object.defineProperty(e,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[r]=o,e}function a(e,r){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?a(Object(o),!0).forEach((function(r){t(e,r,o[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(o,r))}))}return e}function l(e,r){if(null==e)return{};var o,n,t=function(e,r){if(null==e)return{};var o,n,t={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],r.indexOf(o)>=0||(t[o]=e[o]);return t}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],r.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var s=n.createContext({}),u=function(e){var r=n.useContext(s),o=r;return e&&(o="function"==typeof e?e(r):i(i({},r),e)),o},c=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},k=n.forwardRef((function(e,r){var o=e.components,t=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(o),k=t,m=p["".concat(s,".").concat(k)]||p[k]||d[k]||a;return o?n.createElement(m,i(i({ref:r},c),{},{components:o})):n.createElement(m,i({ref:r},c))}));function m(e,r){var o=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var a=o.length,i=new Array(a);i[0]=k;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:t,i[1]=l;for(var u=2;u<a;u++)i[u]=o[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}k.displayName="MDXCreateElement"},5503:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var n=o(5773),t=(o(7378),o(5318));const a={title:"Live migration",sidebar_position:10},i=void 0,l={unversionedId:"pro/migration",id:"pro/migration",title:"Live migration",description:"Normally we recommend you shut down all of your Graphile Worker instances before",source:"@site/docs/pro/migration.md",sourceDirName:"pro",slug:"/pro/migration",permalink:"/docs/pro/migration",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/pro/migration.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Live migration",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Worker Pro!",permalink:"/docs/pro/"},next:{title:"Crashed worker recovery",permalink:"/docs/pro/recovery"}},s={},u=[{value:"Configuration",id:"configuration",level:2},{value:"Caveats",id:"caveats",level:2}],c={toc:u},p="wrapper";function d(e){let{components:r,...o}=e;return(0,t.kt)(p,(0,n.Z)({},c,o,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Normally we recommend you shut down all of your Graphile Worker instances before\nupgrading to certain new versions of Worker, since schema and API changes may\ncause older workers to break, leading to long waits and/or duplicate execution\ndue to failure to mark jobs complete. To know which versions of Worker are\nimpacted, please see the ",(0,t.kt)("a",{parentName:"p",href:"/releases"},"Release Notes"),"."),(0,t.kt)("p",null,"Worker Pro performs checks on startup and tracks running workers so that each\nWorker can know if they","'","re out of date (in which case they should\ngracefully shut down) or if they need to wait for previous worker versions to\nexit fully before they can run migrations. Worker Pro understands which\nmigrations are safe versus breaking, and can help you to roll out new versions\nof Worker on a server-by-server basis without having to scale your workers to\nzero before applying an update."),(0,t.kt)("h2",{id:"configuration"},"Configuration"),(0,t.kt)("p",null,"See ",(0,t.kt)("a",{parentName:"p",href:"/docs/pro/config"},"Pro configuration")," for details on how to configure Worker Pro,\nincluding the full meaning of each option."),(0,t.kt)("p",null,"The live migration feature relies on the following settings:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"heartbeatInterval")," ","\u2014"," worker checkin frequency"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"maxMigrationWaitTime")," ","\u2014"," how long to wait for old active workers to\ncomplete current jobs before force migrating")),(0,t.kt)("h2",{id:"caveats"},"Caveats"),(0,t.kt)("p",null,"You must be running the latest supported version of Worker Pro across your\nentire Worker fleet before you rely on this functionality."),(0,t.kt)("p",null,"Once you adopt Worker Pro and are certain that all running workers are using\nWorker Pro you must do a one-time cleanup of your database: specifically, you\nneed to unlock all jobs that were locked by older workers (workers not running\nWorker Pro). This must be done before you migrate otherwise you risk receiving\ndivision by zero migration errors (these errors are convenient for assertions in\nthe migrations)."),(0,t.kt)("p",null,"For Graphile Worker before (excluding) v0.16.0 this will look something like:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nupdate graphile_worker.jobs\nset locked_at = null, locked_by = null\nwhere locked_by is not null and locked_by not in (\n  select worker_id from graphile_worker._private_pro_workers\n);\nupdate graphile_worker.job_queues\nset locked_at = null, locked_by = null\nwhere locked_by is not null and locked_by not in (\n  select worker_id from graphile_worker._private_pro_workers\n);\ncommit;\n")),(0,t.kt)("p",null,"For Graphile Worker v0.16.x it would be:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nupdate graphile_worker._private_jobs as jobs\nset locked_at = null, locked_by = null\nwhere locked_by is not null and locked_by not in (\n  select worker_id from graphile_worker._private_pro_workers\n);\nupdate graphile_worker._private_job_queues as job_queues\nset locked_at = null, locked_by = null\nwhere locked_by is not null and locked_by not in (\n  select worker_id from graphile_worker._private_pro_workers\n);\ncommit;\n")),(0,t.kt)("p",null,"For Graphile Worker v0.17.x+ it would be:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nupdate graphile_worker._private_jobs as jobs\nset locked_at = null, locked_by = null\nwhere locked_by is not null and locked_by not in (\n  select pool_id from graphile_worker._private_pro_pools\n);\nupdate graphile_worker._private_job_queues as job_queues\nset locked_at = null, locked_by = null\nwhere locked_by is not null and locked_by not in (\n  select pool_id from graphile_worker._private_pro_pools\n);\ncommit;\n")))}d.isMDXComponent=!0}}]);