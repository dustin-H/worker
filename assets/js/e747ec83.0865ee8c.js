"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[7051],{9916:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>y});var n=t(3696);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),h=a,y=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return t?n.createElement(y,i(i({ref:r},p),{},{components:t})):n.createElement(y,i({ref:r},p))}));function y(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=h;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6534:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(8102),a=(t(3696),t(9916));const o={title:"Glossary"},i=void 0,s={unversionedId:"glossary",id:"glossary",title:"Glossary",description:"Here are some of the terms you may come across when using Graphile Worker:",source:"@site/docs/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/docs/glossary",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/glossary.md",tags:[],version:"current",frontMatter:{title:"Glossary"},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/docs/faq"},next:{title:"Scaling tips",permalink:"/docs/scaling"}},l={},c=[{value:"Task",id:"task",level:2},{value:"Task identifier",id:"task-identifier",level:2},{value:"Task executor",id:"task-executor",level:2},{value:"Job",id:"job",level:2},{value:"Payload",id:"payload",level:2},{value:"Worker",id:"worker",level:2},{value:"WorkerPool",id:"workerpool",level:2},{value:"Cron",id:"cron",level:2},{value:"Runner",id:"runner",level:2},{value:"Graceful shutdown",id:"graceful-shutdown",level:2},{value:"Forceful shutdown",id:"forceful-shutdown",level:2}],p={toc:c},d="wrapper";function u(e){let{components:r,...t}=e;return(0,a.yg)(d,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Here are some of the terms you may come across when using Graphile Worker:"),(0,a.yg)("h2",{id:"task"},"Task"),(0,a.yg)("p",null,"Something that can be executed, the type of work that a Job may take, such as\n","\u201c","send email","\u201d",", ","\u201c","convert image","\u201d"," or ","\u201c","process\nwebhook","\u201d","."),(0,a.yg)("h2",{id:"task-identifier"},"Task identifier"),(0,a.yg)("p",null,"The unique name given to a task, for example ",(0,a.yg)("inlineCode",{parentName:"p"},"send_email")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"convert_image"),"."),(0,a.yg)("h2",{id:"task-executor"},"Task executor"),(0,a.yg)("p",null,"The code responsible for executing a particular task; typically defined via a\nJavaScript or TypeScript function:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},'import type { Task } from "graphile-worker";\nimport { ses, Source } from "../lib/aws-ses.js";\n\nexport const send_email: Task = async (payload, helpers) => {\n  const send = ses.sendEmail({\n    Destination: { ToAddresses: [payload.address] },\n    Message: {\n      Subject: { Charset: "UTF-8", Data: payload.subject },\n      Body: { Text: { Charset: "UTF-8", Data: payload.body } },\n    },\n    Source,\n  });\n  await send.promise();\n};\n')),(0,a.yg)("h2",{id:"job"},"Job"),(0,a.yg)("p",null,"A single ","\u201c","job to be done","\u201d",": which Task to execute and what parameters\n(Payload) to execute it with. Also contains additional details such as how many\nattempts it has had so far, what the max attempts are, when it will be attempted\nnext, etc. Created via the ",(0,a.yg)("a",{parentName:"p",href:"/docs/library/add-job"},"JS ",(0,a.yg)("inlineCode",{parentName:"a"},"addJob()"))," or\n",(0,a.yg)("a",{parentName:"p",href:"/docs/sql-add-job"},"SQL ",(0,a.yg)("inlineCode",{parentName:"a"},"graphile_worker.add_job()"))," function."),(0,a.yg)("h2",{id:"payload"},"Payload"),(0,a.yg)("p",null,"The data associated with a particular Job, for example a job might reference the\n",(0,a.yg)("inlineCode",{parentName:"p"},"send_email")," Task and indicate via the Payload the ",(0,a.yg)("inlineCode",{parentName:"p"},"address")," to which to send\nthe email plus the ",(0,a.yg)("inlineCode",{parentName:"p"},"subject")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"body")," of the email."),(0,a.yg)("h2",{id:"worker"},"Worker"),(0,a.yg)("p",null,"A JS routine that is provided a list of Tasks it is capable of executing and\nthen looks for a single Job to execute matching one of the provided Tasks.\nExecutes the Job, reporting success or failure back to the database. Then finds\nthe next Job and continues this process."),(0,a.yg)("h2",{id:"workerpool"},"WorkerPool"),(0,a.yg)("p",null,"Manages a collection of Workers such that multiple Jobs can be executed in\nparallel (within the constraints of the Node.js event loop). Responsible for\nlistening for and dispatching new job events."),(0,a.yg)("h2",{id:"cron"},"Cron"),(0,a.yg)("p",null,"A system of executing ",(0,a.yg)("a",{parentName:"p",href:"/docs/cron"},"recurring tasks"),"."),(0,a.yg)("h2",{id:"runner"},"Runner"),(0,a.yg)("p",null,'Manages a Cron instance and a WorkerPool instance; if you\'re using Graphile\nWorker in "library mode" then this is the main way you would execute Graphile\nWorker. (Really small piece of code:\n',(0,a.yg)("a",{parentName:"p",href:"https://github.com/graphile/worker/blob/99b15438847a87532c122ac4ed8233a3245556e7/src/runner.ts#L69-L106"},"https://github.com/graphile/worker/blob/99b15438847a87532c122ac4ed8233a3245556e7/src/runner.ts#L69-L106"),")"),(0,a.yg)("h2",{id:"graceful-shutdown"},"Graceful shutdown"),(0,a.yg)("p",null,"When a WorkerPool stops accepting new jobs and exits once all its Workers have\nfinished their currently executing jobs. This is triggered on a SIGTERM/SIGINT\nor similar signal, or via the ",(0,a.yg)("inlineCode",{parentName:"p"},"runner.stop()")," API."),(0,a.yg)("h2",{id:"forceful-shutdown"},"Forceful shutdown"),(0,a.yg)("p",null,"When a WorkerPool stops accepting new jobs and explicitly unlocks all in\nprogress tasks. The process should exit as soon as the in progress tasks have\nbeen unlocked, to ensure that they do not continue to be processed."))}u.isMDXComponent=!0}}]);