"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[8120],{5318:(e,r,n)=>{n.d(r,{Zo:()=>c,kt:()=>v});var t=n(7378);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,v=u["".concat(s,".").concat(d)]||u[d]||k[d]||a;return n?t.createElement(v,i(i({ref:r},c),{},{components:n})):t.createElement(v,i({ref:r},c))}));function v(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1546:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var t=n(5773),o=(n(7378),n(5318));const a={title:"WorkerEvents"},i=void 0,l={unversionedId:"worker-events",id:"worker-events",title:"WorkerEvents",description:"We support a large number of events via an EventEmitter. You can either retrieve",source:"@site/docs/worker-events.md",sourceDirName:".",slug:"/worker-events",permalink:"/docs/worker-events",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/worker-events.md",tags:[],version:"current",frontMatter:{title:"WorkerEvents"},sidebar:"tutorialSidebar",previous:{title:"Scaling tips",permalink:"/docs/scaling"}},s={},p=[{value:"Example: via <code>runner.events</code>",id:"example-via-runnerevents",level:3},{value:"Example: using <code>EventEmitter</code>",id:"example-using-eventemitter",level:3},{value:"Example: In graphile configuration",id:"example-in-graphile-configuration",level:3},{value:"Definitions:",id:"definitions",level:2}],c={toc:p},u="wrapper";function k(e){let{components:r,...n}=e;return(0,o.kt)(u,(0,t.Z)({},c,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We support a large number of events via an EventEmitter. You can either retrieve\nthe event emitter via the ",(0,o.kt)("inlineCode",{parentName:"p"},"events")," property on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Runner")," object, or you can\ncreate your own event emitter and pass it to Graphile Worker via the\n",(0,o.kt)("inlineCode",{parentName:"p"},"WorkerOptions.events")," option (this is primarily useful for receiving events\nduring Graphile Worker's startup procedure, before the ",(0,o.kt)("inlineCode",{parentName:"p"},"run()")," promise\nresolves)."),(0,o.kt)("h3",{id:"example-via-runnerevents"},"Example: via ",(0,o.kt)("inlineCode",{parentName:"h3"},"runner.events")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'runner.events.on("job:success", ({ worker, job }) => {\n  console.log(`Hooray! Worker ${worker.workerId} completed job ${job.id}`);\n});\n')),(0,o.kt)("h3",{id:"example-using-eventemitter"},"Example: using ",(0,o.kt)("inlineCode",{parentName:"h3"},"EventEmitter")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/** @type {import("graphile-worker").WorkerEvents} */\nconst events = new EventEmitter();\nevents.on(...);\nevents.on(...);\nevents.on(...);\n\nconst runner = await run({ events, ... });\n')),(0,o.kt)("h3",{id:"example-in-graphile-configuration"},"Example: In graphile configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'/** @type {import("graphile-worker").WorkerEvents} */\nconst events = new EventEmitter();\nevents.on(...);\nevents.on(...);\nevents.on(...);\n\n/** @type {GraphileConfig.Preset} */\nconst preset = {\n  worker: {\n    events,\n    ...\n  }\n};\n\nexport default preset;\n')),(0,o.kt)("h2",{id:"definitions"},"Definitions:"),(0,o.kt)("p",null,"Details of what events we support and what data is available on the event\npayload is detailed below in TypeScript syntax:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'export type WorkerEvents = TypedEventEmitter<{\n  /**\n   * When a worker pool is created\n   */\n  "pool:create": { workerPool: WorkerPool };\n\n  /**\n   * When a worker pool attempts to connect to PG ready to issue a LISTEN\n   * statement\n   */\n  "pool:listen:connecting": { workerPool: WorkerPool };\n\n  /**\n   * When a worker pool starts listening for jobs via PG LISTEN\n   */\n  "pool:listen:success": { workerPool: WorkerPool; client: PoolClient };\n\n  /**\n   * When a worker pool faces an error on their PG LISTEN client\n   */\n  "pool:listen:error": {\n    workerPool: WorkerPool;\n    error: any;\n    client: PoolClient;\n  };\n\n  /**\n   * When a worker pool is released\n   */\n  "pool:release": { pool: WorkerPool };\n\n  /**\n   * When a worker pool starts a graceful shutdown\n   */\n  "pool:gracefulShutdown": { pool: WorkerPool; message: string };\n\n  /**\n   * When a worker pool graceful shutdown throws an error\n   */\n  "pool:gracefulShutdown:error": { pool: WorkerPool; error: any };\n\n  /**\n   * When a worker is created\n   */\n  "worker:create": { worker: Worker; tasks: TaskList };\n\n  /**\n   * When a worker release is requested\n   */\n  "worker:release": { worker: Worker };\n\n  /**\n   * When a worker stops (normally after a release)\n   */\n  "worker:stop": { worker: Worker; error?: any };\n\n  /**\n   * When a worker is about to ask the database for a job to execute\n   */\n  "worker:getJob:start": { worker: Worker };\n\n  /**\n   * When a worker calls get_job but there are no available jobs\n   */\n  "worker:getJob:error": { worker: Worker; error: any };\n\n  /**\n   * When a worker calls get_job but there are no available jobs\n   */\n  "worker:getJob:empty": { worker: Worker };\n\n  /**\n   * When a worker faces a fatal error, for example it was unable to inform the\n   * database that it had completed/failed a job.\n   */\n  "worker:fatalError": { worker: Worker; error: any; jobError: any | null };\n\n  /**\n   * When a job is retrieved by get_job\n   */\n  "job:start": { worker: Worker; job: Job };\n\n  /**\n   * When a job completes successfully\n   */\n  "job:success": { worker: Worker; job: Job };\n\n  /**\n   * When a job throws an error\n   */\n  "job:error": { worker: Worker; job: Job; error: any };\n\n  /**\n   * When a job fails permanently (emitted after job:error when appropriate)\n   */\n  "job:failed": { worker: Worker; job: Job; error: any };\n\n  /**\n   * When a job has finished executing and the result (success or failure) has\n   * been written back to the database\n   */\n  "job:complete": { worker: Worker; job: Job; error: any };\n\n  /**\n   * When the runner is terminated by a signal\n   */\n  gracefulShutdown: { signal: Signal };\n\n  /**\n   * When the runner is stopped\n   */\n  stop: {};\n}>;\n')))}k.isMDXComponent=!0}}]);