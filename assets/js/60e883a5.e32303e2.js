"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[8383],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(5773),r=(n(7378),n(5318));const i={title:"The 'jobs' view",sidebar_position:105},o=void 0,l={unversionedId:"jobs-view",id:"jobs-view",title:"The 'jobs' view",description:"The private tables that jobs are actually stored into are unstable: we may",source:"@site/docs/jobs-view.md",sourceDirName:".",slug:"/jobs-view",permalink:"/docs/jobs-view",draft:!1,editUrl:"https://github.com/graphile/worker/tree/main/website/docs/jobs-view.md",tags:[],version:"current",sidebarPosition:105,frontMatter:{title:"The 'jobs' view",sidebar_position:105},sidebar:"tutorialSidebar",previous:{title:"Administrative functions",permalink:"/docs/admin-functions"},next:{title:"Forbidden flags",permalink:"/docs/forbidden-flags"}},s={},d=[{value:"Performance considerations",id:"performance-considerations",level:2},{value:"Columns",id:"columns",level:2}],p={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The private tables that jobs are actually stored into are unstable: we may\nchange them in a patch release, so you should not use them. As of Graphile\nWorker 0.16, the ",(0,r.kt)("inlineCode",{parentName:"p"},"graphile_worker.jobs")," view exists as a stable interface to let\nyou see details of enqueued jobs. The ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," view may gain additional columns\nover time, but any column deletions or type changes will require a semver major\nrelease of Graphile Worker."),(0,r.kt)("h2",{id:"performance-considerations"},"Performance considerations"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"You should not read from the ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," view frequently; any reading from Graphile\nWorker's tables can cause a performance impact on the running workers, and doing\nthis too often could cause major performance degradation for you - especially if\nyou access many rows, or your read does not use an index.")),(0,r.kt)("p",null,"When reading from the ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," view, it's recommended that you only select the\ncolumns you truly need, and that you apply efficient filters to ensure that\nPostgres looks at the fewest number of jobs possible."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Do not read from the ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," view from within a transaction; this could cause\nperformance issues!")),(0,r.kt)("h2",{id:"columns"},"Columns"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id")," - the primary key of the job"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queue_name")," - the name of the queue (if any) this job was added to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"task_identifier")," - the identifier of the task this job wants to execute"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"priority"),' - the "priority" (really the "nice") of the job; a numerically\nlower (including negative) value indicates the job should execute before tasks\nwith a numerically higher value'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run_at")," - when the job is scheduled to run"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"attempts")," - how many times we've attempted to execute this job"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max_attempts")," - the maximum number of times we'll attempt this job"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"last_error")," - if an error occurred the last time this job was executed, what\nthe error was"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"created_at")," - when the job was inserted into the database"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"updated_at")," - when the job was last updated"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - the ",(0,r.kt)("inlineCode",{parentName:"li"},"job_key")," of the job, if any"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locked_at")," - when the job was locked, if locked"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"locked_by")," - the WorkerPool id that the job was locked by, if locked"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"revision")," - the revision number of the job, bumped each time the record is\nupdated"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"flags")," - the ",(0,r.kt)("a",{parentName:"li",href:"/docs/forbidden-flags"},"forbidden flags")," associated with this\njob")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The job ",(0,r.kt)("inlineCode",{parentName:"p"},"payload")," is deliberately not included in the ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," view to avoid\npeople from performing expensive filtering using it. If you need to see the\npayload of a job, you should use a ",(0,r.kt)("a",{parentName:"p",href:"/docs/schema#tracking-jobs"},"tracking table"),"\ninstead. If you need it for debugging then you can read it from the private\ntables, just be careful, and don't write scripts to do it for you since it might\nchange in a patch release.")))}c.isMDXComponent=!0}}]);