"use strict";(self.webpackChunkgraphile_worker=self.webpackChunkgraphile_worker||[]).push([[2334],{5318:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),k=i,h=d["".concat(s,".").concat(k)]||d[k]||m[k]||l;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2680:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>u,default:()=>c,frontMatter:()=>p,metadata:()=>d,toc:()=>m});var a=n(5773),i=(n(7378),n(5318));const l=[{value:"Worker Pro: easing migration",id:"worker-pro-easing-migration",level:2},{value:"v0.16.3",id:"v0163",level:2},{value:"v0.16.2",id:"v0162",level:2},{value:"v0.16.1",id:"v0161",level:2},{value:"v0.16.0",id:"v0160",level:2},{value:"General Migration Warnings",id:"general-migration-warnings",level:3},{value:"New features",id:"new-features",level:3},{value:"Fixes",id:"fixes",level:3},{value:"v0.15.2-bridge.0",id:"v0152-bridge0",level:2},{value:"v0.15.1",id:"v0151",level:2},{value:"v0.15.0",id:"v0150",level:2},{value:"v0.14.0",id:"v0140",level:2},{value:"Breaking changes",id:"breaking-changes",level:3},{value:"Changes to internals",id:"changes-to-internals",level:3},{value:"Features",id:"features",level:3},{value:"v0.13.1-bridge.0",id:"v0131-bridge0",level:2},{value:"v0.13.0",id:"v0130",level:2},{value:"v0.12.2",id:"v0122",level:2},{value:"v0.12.1",id:"v0121",level:2},{value:"v0.12.0",id:"v0120",level:2},{value:"v0.11.4",id:"v0114",level:2},{value:"v0.11.3",id:"v0113",level:2},{value:"v0.11.2",id:"v0112",level:2},{value:"v0.11.1",id:"v0111",level:2},{value:"v0.11.0",id:"v0110",level:2},{value:"v0.10.0",id:"v0100",level:2},{value:"v0.9.0",id:"v090",level:2},{value:"v0.8.1",id:"v081",level:2},{value:"v0.8.0",id:"v080",level:2},{value:"v0.7.2",id:"v072",level:2},{value:"v0.6.1",id:"v061",level:2},{value:"v0.6.0",id:"v060",level:2},{value:"v0.5.0",id:"v050",level:2},{value:"v0.5.0 improvements:",id:"v050-improvements",level:3},{value:"v0.5.0 breaking changes:",id:"v050-breaking-changes",level:3},{value:"v0.4.0",id:"v040",level:2},{value:"v0.3.0-rc.0",id:"v030-rc0",level:2},{value:"v0.2.0",id:"v020",level:2},{value:"v0.1.0",id:"v010",level:2},{value:"v0.1.0-alpha.0",id:"v010-alpha0",level:2},{value:"v0.0.1-alpha.7",id:"v001-alpha7",level:2},{value:"v0.0.1-alpha.6",id:"v001-alpha6",level:2},{value:"v0.0.1-alpha.5",id:"v001-alpha5",level:2},{value:"v0.0.1-alpha.4",id:"v001-alpha4",level:2},{value:"v0.0.1-alpha.3",id:"v001-alpha3",level:2},{value:"v0.0.1-alpha.2",id:"v001-alpha2",level:2},{value:"v0.0.1-alpha.1",id:"v001-alpha1",level:2},{value:"v0.0.1-alpha.0",id:"v001-alpha0",level:2}],r={toc:l},o="wrapper";function s(e){let{components:t,...n}=e;return(0,i.kt)(o,(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"release-notes"},"Release notes"),(0,i.kt)("h2",{id:"worker-pro-easing-migration"},"Worker Pro: easing migration"),(0,i.kt)("p",null,'From time to time Graphile Worker needs to make changes to the database, and\nthese changes might cause pre-existing workers to fail in "interesting" ways.\nThese breaking changes are noted in the release notes below, and typically you\nneed to "scale to zero" to perform these updates - turn off all your existing\nworkers and only then run only new workers.'),(0,i.kt)("p",null,"Worker Pro is a proprietary plugin which, among other things, helps to alleviate\nthis issue. It tracks the running workers and when a new breaking migration is\nrequired it has all old workers exit cleanly (once they've finished what they're\nworking on) and no further old workers will be able to start up. Once all old\nworkers have exited, the migration can go ahead as it normally would. This\navoids the need to \"scale to zero\" as workers will communicate with each other\nto make sure the system as a whole remains consistent."),(0,i.kt)("p",null,"Read more:\n",(0,i.kt)("a",{parentName:"p",href:"https://worker.graphile.org/docs/pro/migration"},"Worker Pro Migration"),"."),(0,i.kt)("h2",{id:"v0163"},"v0.16.3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Add "cannot connect now" to list of retryable error codes - thanks @psteinroe')),(0,i.kt)("h2",{id:"v0162"},"v0.16.2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fix loading tasks on Windows (use URLs rather than file paths) - thanks\n@hiepxanh"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"cleanup")," function to remove unused queues, stale task identifiers, and\npermanently failed jobs - thanks @christophemacabiau"),(0,i.kt)("li",{parentName:"ul"},"Fix logger scope for workers - thanks @jcapcik"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"helpers.getQueueName()")," to retrieve the queue name of the currently\nrunning job"),(0,i.kt)("li",{parentName:"ul"},"Automatically retry certain internal operations on serialization failure or\ndeadlock detection (useful if you have changed your\n",(0,i.kt)("inlineCode",{parentName:"li"},"default_transaction_isolation")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"serializable")," or similar)")),(0,i.kt)("h2",{id:"v0161"},"v0.16.1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixes issue importing task files that were written in TypeScript ESM format\nbut exported as CommonJS.")),(0,i.kt)("h2",{id:"v0160"},"v0.16.0"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"There's a breakdown of these release notes available on the new\n",(0,i.kt)("a",{parentName:"em",href:"https://worker.graphile.org/news/2023-12-11-016-release"},"Worker Website"),", where\nwe go into more detail about the headline features.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"THIS RELEASE INTRODUCES SIGNIFICANT CHANGES"),", in preparation for moving\ntowards the 1.0 release. Please read these notes carefully."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": this release is incompatible with previous releases - do not run\nearlier workers against this releases database schema or Bad Things will happen.\nYou should shut down all workers before migrating to this version, or use\n",(0,i.kt)("a",{parentName:"p",href:"https://worker.graphile.org/docs/pro"},"Worker Pro"),". (If you're upgrading from\nv0.13.0, upgrade to v0.13.1-bridge.0 first and add the Worker Pro plugin to\nthat; deploy it across your fleet, and then proceed to upgrade to v0.16.0.)"),(0,i.kt)("h3",{id:"general-migration-warnings"},"General Migration Warnings"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\ud83d\udea8 Drops support for node <18",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"As of 24th October 2023, Node 20 is the active LTS and Node 18 is\nmaintainence LTS; previous versions are no longer supported"))),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udea8 Renames all of the tables ",(0,i.kt)("inlineCode",{parentName:"li"},"graphile_worker.*")," to\n",(0,i.kt)("inlineCode",{parentName:"li"},"graphile_worker._private_*"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We might change these tables in a patch release"),(0,i.kt)("li",{parentName:"ul"},"This has always been the case, these are not a public interface"),(0,i.kt)("li",{parentName:"ul"},"New naming makes it clear that you should not use them and should not rely\non their schema being stable"))),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udea8 Removes ",(0,i.kt)("inlineCode",{parentName:"li"},"maxContiguousErrors"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"It wasn't fit for purpose, so best to remove it for now"),(0,i.kt)("li",{parentName:"ul"},"See #307 for more details"))),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udea8 Removes ",(0,i.kt)("inlineCode",{parentName:"li"},"--watch")," and watch mode in general",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Now signal handling is improved and with people wanting to use ESM to define\nmodules, it's finally time to remove the experimental watch mode"),(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"node --watch")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"nodemon")," or similar instead"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"crontab")," file is also not watched, so be sure to watch that too!"),(0,i.kt)("li",{parentName:"ul"},"Fixes a lot of weirdness that can happen when you attempt to hot-reload\ntasks"))),(0,i.kt)("li",{parentName:"ul"},"\ud83d\udea8 Breaking TypeScript changes",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Lots of ",(0,i.kt)("inlineCode",{parentName:"li"},"any")," changed to ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"In particular, errors in the event emitter payloads are now ",(0,i.kt)("inlineCode",{parentName:"li"},"unknown"),"\nrather than ",(0,i.kt)("inlineCode",{parentName:"li"},"any"),", so you might need to cast"))),(0,i.kt)("li",{parentName:"ul"},"Payload is now marked as required in ",(0,i.kt)("inlineCode",{parentName:"li"},"addJob()"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Set to ",(0,i.kt)("inlineCode",{parentName:"li"},"{}")," if your task doesn't need a payload")))))),(0,i.kt)("h3",{id:"new-features"},"New features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Graphile Config and new plugin system",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Worker is now optionally\n",(0,i.kt)("a",{parentName:"li",href:"https://worker.graphile.org/docs/config"},"configurable")," with\n",(0,i.kt)("inlineCode",{parentName:"li"},"graphile-config")," - configuration can now be read from a\n",(0,i.kt)("inlineCode",{parentName:"li"},"graphile.config.ts")," (or ",(0,i.kt)("inlineCode",{parentName:"li"},".js"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".cjs"),", etc) file"),(0,i.kt)("li",{parentName:"ul"},"This enables a whole suite of new options and features, including being able\nto share your preset files across multiple projects!"),(0,i.kt)("li",{parentName:"ul"},"New plugin hooks added - get in touch if you need more!"),(0,i.kt)("li",{parentName:"ul"},"E.g. allows you to replace the task loading code entirely with your own\nimplementation!"))),(0,i.kt)("li",{parentName:"ul"},"Support for loading tasks from nested folders",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"(",(0,i.kt)("inlineCode",{parentName:"li"},"tasks/users/email/verify.js")," will identify task ",(0,i.kt)("inlineCode",{parentName:"li"},"users/email/verify"),")"))),(0,i.kt)("li",{parentName:"ul"},"Native ESM support",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Enabled by the plugin system"),(0,i.kt)("li",{parentName:"ul"},"Support for loading both CommonJS and ESM files (including ",(0,i.kt)("inlineCode",{parentName:"li"},".cjs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".mjs"),"\nand ",(0,i.kt)("inlineCode",{parentName:"li"},".js")," extensions)"))),(0,i.kt)("li",{parentName:"ul"},"Compile-to-JS language support",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'Any "compile-to-JS" language can be ',(0,i.kt)("inlineCode",{parentName:"li"},"import()"),"ed"),(0,i.kt)("li",{parentName:"ul"},'Ensure the relevant "loaders" are available'),(0,i.kt)("li",{parentName:"ul"},"e.g. for native TypeScript support you might use\n",(0,i.kt)("inlineCode",{parentName:"li"},'NODE_OPTIONS="--loader ts-node/esm" npx graphile-worker')),(0,i.kt)("li",{parentName:"ul"},"List the extensions you support in the\n",(0,i.kt)("a",{parentName:"li",href:"https://worker.graphile.org/docs/config#workerfileextensions"},"configuration file")))),(0,i.kt)("li",{parentName:"ul"},"Tasks in non-JS languages (EXPERIMENTAL!)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Enabled by the plugin system"),(0,i.kt)("li",{parentName:"ul"},"Any language your shell can execute: python, bash, rust, ..."),(0,i.kt)("li",{parentName:"ul"},"Place an executable file in the ",(0,i.kt)("inlineCode",{parentName:"li"},"tasks/")," folder and ensure it's named with\nthe task identifier (extensions ignored)"),(0,i.kt)("li",{parentName:"ul"},"See\n",(0,i.kt)("a",{parentName:"li",href:"https://worker.graphile.org/docs/tasks#loading-executable-files"},"Loading executable files"),"\nin the documentation"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"abortSignal"),": job cancellation (EXPERIMENTAL!)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Tasks can honour the ",(0,i.kt)("inlineCode",{parentName:"li"},"abortSignal")," passed in via helpers to cancel\nasynchronous work on ",(0,i.kt)("inlineCode",{parentName:"li"},"gracefulShutdown")),(0,i.kt)("li",{parentName:"ul"},"Can reduce waiting for the task to complete during a graceful shutdown; task\nexecutor can listen for the ",(0,i.kt)("inlineCode",{parentName:"li"},"abortSignal")," and decided whether to exit or\ncontinue"))),(0,i.kt)("li",{parentName:"ul"},"TypeScript typing of tasks",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"New ",(0,i.kt)("inlineCode",{parentName:"li"},"GraphileWorker.Tasks")," global interface"),(0,i.kt)("li",{parentName:"ul"},"Not recommended, but often requested!"),(0,i.kt)("li",{parentName:"ul"},"Types calls to ",(0,i.kt)("inlineCode",{parentName:"li"},"addJob()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"quickAddJob()"),", and types task executors"),(0,i.kt)("li",{parentName:"ul"},"Read\n",(0,i.kt)("a",{parentName:"li",href:"https://worker.graphile.org/docs/typescript"},"the caveats in the documentation")))),(0,i.kt)("li",{parentName:"ul"},"Adds ",(0,i.kt)("inlineCode",{parentName:"li"},"graphile_worker.jobs")," view",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"A public interface to view details of jobs"),(0,i.kt)("li",{parentName:"ul"},"Stable across patch and minor versions"),(0,i.kt)("li",{parentName:"ul"},"DELIBERATELY excludes the ",(0,i.kt)("inlineCode",{parentName:"li"},"payload")," field"),(0,i.kt)("li",{parentName:"ul"},"Do not poll this, it will impact performance"),(0,i.kt)("li",{parentName:"ul"},"Do not do expensive filtering/ordering against this, it will impact\nperformance"))),(0,i.kt)("li",{parentName:"ul"},"New public ",(0,i.kt)("inlineCode",{parentName:"li"},"force_unlock_workers")," database function",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Unlocks all jobs from a list of crashed/terminated worker IDs"))),(0,i.kt)("li",{parentName:"ul"},"Crontab: now supports ",(0,i.kt)("inlineCode",{parentName:"li"},"jobKey")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"jobKeyMode")," opts (thanks @spiffytech!)"),(0,i.kt)("li",{parentName:"ul"},"Schema",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Checks that current schema in database isn't more up to date than the\ncurrent worker",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Won't be useful until future schema changes"))),(0,i.kt)("li",{parentName:"ul"},"Trigger a graceful shutdown if a new Graphile Worker process migrates the\ndatabase schema"))),(0,i.kt)("li",{parentName:"ul"},"Events: add more detail to ",(0,i.kt)("inlineCode",{parentName:"li"},"cron:backfill")," event"),(0,i.kt)("li",{parentName:"ul"},"Tasks: now use ",(0,i.kt)("inlineCode",{parentName:"li"},"await import(...)")," rather than ",(0,i.kt)("inlineCode",{parentName:"li"},"require(...)"),", so ESM can be\nimported"),(0,i.kt)("li",{parentName:"ul"},"Logging: changed format of task completion/failure logs to include\nattempts/max attempts and to reduce duplicate parenthesis"),(0,i.kt)("li",{parentName:"ul"},"Optimization: Replaces job announcement trigger with calls directly in\n",(0,i.kt)("inlineCode",{parentName:"li"},"add_job")," / ",(0,i.kt)("inlineCode",{parentName:"li"},"add_jobs")," to reduce queuing overhead")),(0,i.kt)("h3",{id:"fixes"},"Fixes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixes graceful shutdown (both manually via ",(0,i.kt)("inlineCode",{parentName:"li"},".gracefulShutdown()")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},".forcefulShutdown()")," and via signal handling)"),(0,i.kt)("li",{parentName:"ul"},"Signals: now releases signal handlers when shut down via the API"),(0,i.kt)("li",{parentName:"ul"},"Fixes bug where queuing 100 jobs in a single statement would only nudge a\nsingle inactive worker",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Now as many workers as necessary and available will be nudged")))),(0,i.kt)("h2",{id:"v0152-bridge0"},"v0.15.2-bridge.0"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"TL;DR: if you want to use ",(0,i.kt)("a",{parentName:"strong",href:"https://worker.graphile.org/docs/pro"},"Worker Pro"),"\nto ease migration to v0.16.0, upgrade to this version if you're on v0.14.0 or\nhigher, or v0.13.1-bridge.0 if you're on v0.13.0 or lower for Worker Pro\nsupport.")),(0,i.kt)("p",null,'This release is a "bridge" release to make migration to v0.16.0 easier. Since\nv0.16.0 includes breaking database changes, no active workers should be running\nwhen the migrations happen, and once the migrations have happened older workers\nare no longer supported and their usage may lead to weird and undesirable\nbehaviors.'),(0,i.kt)("p",null,'Normally we\'d recommend that you "scale to zero" before performing these kinds\nof migrations, to ensure that no older workers will be running against the DB at\nthe same time; however this release adds support for the (proprietary)\n',(0,i.kt)("a",{parentName:"p",href:"https://worker.graphile.org/docs/pro"},"Worker Pro plugin")," which (when used\nconsistently across your entire worker fleet) enables your workers to\ncoordinate, triggering legacy workers to cleanly shut down (and waiting for them\nto do so) before migrating the database. The Worker Pro plugin also details the\nintent to upgrade, meaning if new legacy workers start up in the interrim, they\nwill also not start looking for jobs since they know they will be out of date\nsoon. As soon as all running tasks have finished processing (or a configurable\ntimeout has elapsed) the migration will go ahead."),(0,i.kt)("p",null,"The Worker Pro plugin mentioned above is enabled by the addition of support for\n",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-config"),", the standardized plugin and preset system for the entire\nGraphile suite. Thanks to this integration, we've been able to add a\nplugin/hooks system that you can use to customize the behavior of Worker\n(including implementing some of the behaviors described in the previous\nparagraph yourself, should you so desire)."),(0,i.kt)("p",null,"This release also adds a startup check that will abort startup if the database\nalready contains breaking migrations that are unsupported by the current worker\nversion, and a significant number of back-ported fixes and new features that\ndidn't require database migrations (including important fixes to the graceful\nshutdown system)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"--watch")," mode is no longer supported. We've removed this from\nv0.16.0 (see the release notes for that version), you should use ",(0,i.kt)("inlineCode",{parentName:"p"},"node --watch"),"\nor similar instead. This also removes ",(0,i.kt)("inlineCode",{parentName:"p"},"fauxRequire")," and all the problems that\nthat had."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": Node versions before v20 and Postgres versions before v12 are no\nlonger supported. (Node v18 ",(0,i.kt)("em",{parentName:"p"},"should")," work, but it segfaults when running the\ntests which is likely a jest/",(0,i.kt)("inlineCode",{parentName:"p"},"node --experimental-vm-modules")," issue which is\nunlikely affect you at runtime.)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixes graceful shutdown (both manually via ",(0,i.kt)("inlineCode",{parentName:"li"},".gracefulShutdown()")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},".forcefulShutdown()")," and via signal handling)"),(0,i.kt)("li",{parentName:"ul"},"Removes ",(0,i.kt)("inlineCode",{parentName:"li"},"maxContinguousErrors")," setting which was poorly implemented and caused\nmore issues than it solved"),(0,i.kt)("li",{parentName:"ul"},"Tracks whether migrations are breaking or not, and:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"refuses to start if an unsupported breaking migration is present in the\ndatabase"),(0,i.kt)("li",{parentName:"ul"},"gracefully shuts down if another worker performs a breaking migration",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"NOTE: this is not sufficiently safe, it's just a backstop. If the\nmigration breaks completing or failing of jobs then your worker will be\nunable to release in-progress tasks even if they're finished; and the\nworker performing the migrations will not wait for legacy workers to\ncomplete. You should shut down your workers before upgrading, or use\nWorker Pro to handle the situation automatically for you."))))),(0,i.kt)("li",{parentName:"ul"},"Adds ",(0,i.kt)("inlineCode",{parentName:"li"},"graphile-config")," support for presets and plugins"),(0,i.kt)("li",{parentName:"ul"},"Adds more events and hooks"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runTaskListOnce")," now uses a WorkerPool internally (to better integrate with\nthe gracefulShutdown logic)"),(0,i.kt)("li",{parentName:"ul"},"Fix ",(0,i.kt)("inlineCode",{parentName:"li"},"WorkerPool.promise")," to only resolve once everything is handled"),(0,i.kt)("li",{parentName:"ul"},"EXPERIMENTAL; see v0.16.0 for documentation:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Adds support for loading tasks from nested folders (e.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"tasks/foo/bar/baz.js")," will add support for a task with identifier\n",(0,i.kt)("inlineCode",{parentName:"li"},"foo/bar/baz"),")"),(0,i.kt)("li",{parentName:"ul"},"Adds support for turning executable files into tasks (i.e. a task written in\npython, Rust, or bash)"),(0,i.kt)("li",{parentName:"ul"},"Adds support for loading TypeScript tasks directly (no need to compile to\nJS, but if you do the JS will have priority)"),(0,i.kt)("li",{parentName:"ul"},"You may see warnings like\n",(0,i.kt)("inlineCode",{parentName:"li"},"WARNING: Failed to load task 'README.md' - no supported handlers found for path: '/path/to/tasks/README.md'")," -\nyou can ignore them (or you can move non-task files out of the ",(0,i.kt)("inlineCode",{parentName:"li"},"tasks"),"\nfolder)"),(0,i.kt)("li",{parentName:"ul"},"Undocumented, experimental and untested preliminary support for cancellable\njobs via ",(0,i.kt)("inlineCode",{parentName:"li"},"AbortSignal"),"; upgrade to v0.16.0+ if you want to actually use this"))),(0,i.kt)("li",{parentName:"ul"},"A huge number of internal changes")),(0,i.kt)("h2",{id:"v0151"},"v0.15.1"),(0,i.kt)("p",null,"Fixes issues with graceful worker shutdowns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deprecates ",(0,i.kt)("inlineCode",{parentName:"li"},"workerPool.release()")," in favour of (equivalent)\n",(0,i.kt)("inlineCode",{parentName:"li"},"workerPool.gracefulShutdown()")),(0,i.kt)("li",{parentName:"ul"},"Fixes ",(0,i.kt)("inlineCode",{parentName:"li"},"workerPool.gracefulShutdown()")," to shut down gracefully (waiting for\njobs to complete)"),(0,i.kt)("li",{parentName:"ul"},"Adds ",(0,i.kt)("inlineCode",{parentName:"li"},"workerPool.forcefulShutdown()"),' to "fail" the running jobs (so they\'ll be\nre-attempted elsewhere) and force-release the pool'),(0,i.kt)("li",{parentName:"ul"},"Fixes handling of signals:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"First termination signal triggers graceful shutdown"),(0,i.kt)("li",{parentName:"ul"},"Signal over next 5 seconds are ignored"),(0,i.kt)("li",{parentName:"ul"},"Second termination signal triggers forceful shutdown"),(0,i.kt)("li",{parentName:"ul"},"Signal over next 5 seconds are ignored"),(0,i.kt)("li",{parentName:"ul"},"Further termination signals are handled by Node (i.e. will likely instantly\nexit the process)")))),(0,i.kt)("h2",{id:"v0150"},"v0.15.0"),(0,i.kt)("p",null,"Migration files are no longer read from filesystem (via ",(0,i.kt)("inlineCode",{parentName:"p"},"fs")," module); instead\nthey are stored as strings in JS to enable Graphile Worker to be bundled. The\nfiles still exist and will continue to be distributed, so this should not be a\nbreaking change. Thanks to @timelf123 for this feature!"),(0,i.kt)("h2",{id:"v0140"},"v0.14.0"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"THIS RELEASE INTRODUCES SIGNIFICANT CHANGES"),", in preparation for moving\ntowards the 1.0 release. Please read these notes carefully."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": this release is incompatible with previous releases - do not run\nearlier workers against this releases database schema or Bad Things will happen.\nYou should shut down all workers before migrating to this version."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": the initial migration, ",(0,i.kt)("inlineCode",{parentName:"p"},"000011"),', in this release cannot run if\nthere are any locked jobs - it will throw a "division by zero" error in this\ncase. Please ensure all existing workers are shut down and any locked jobs\nreleased before upgrading to this version.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": migration ",(0,i.kt)("inlineCode",{parentName:"p"},"000011")," renames the old jobs table, creates a new jobs\ntable with a slightly different format, copies the jobs across, and then deletes\nthe old jobs table. The jobs table itself is not a public interface - you should\nuse the documented SQL functions and TypeScript APIs only - but if you are\nreferencing the jobs table in a database function you may have a bad time."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"priority"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"attempts")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"max_attempts")," are all now ",(0,i.kt)("inlineCode",{parentName:"p"},"smallint"),",\nso please make sure that your values fit into these ranges before starting the\nmigration process. (Really these values should never be larger than about ",(0,i.kt)("inlineCode",{parentName:"p"},"100"),"\nor smaller than about ",(0,i.kt)("inlineCode",{parentName:"p"},"-100")," anyway.)"),(0,i.kt)("h3",{id:"breaking-changes"},"Breaking changes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"BREAKING: Bump minimum Node version to 14 since 12.x is now end-of-life"),(0,i.kt)("li",{parentName:"ul"},"BREAKING: Bump minimum PG version to 12 for ",(0,i.kt)("inlineCode",{parentName:"li"},"generated always as (expression)")),(0,i.kt)("li",{parentName:"ul"},"BREAKING: ",(0,i.kt)("inlineCode",{parentName:"li"},"jobs.priority"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"attempts")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"max_attempts")," are now ",(0,i.kt)("inlineCode",{parentName:"li"},"int2")," rather\nthan ",(0,i.kt)("inlineCode",{parentName:"li"},"int4")," (please ensure your values fit in ",(0,i.kt)("inlineCode",{parentName:"li"},"int2")," -\n",(0,i.kt)("inlineCode",{parentName:"li"},"-32768 <= priority <= +32767"),")"),(0,i.kt)("li",{parentName:"ul"},"BREAKING: CronItem.pattern has been renamed to CronItem.match"),(0,i.kt)("li",{parentName:"ul"},"BREAKING: database error codes have been removed because we've moved to\n",(0,i.kt)("inlineCode",{parentName:"li"},"CHECK")," constraints")),(0,i.kt)("h3",{id:"changes-to-internals"},"Changes to internals"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"WARNING: the 'jobs' table no longer has ",(0,i.kt)("inlineCode",{parentName:"li"},"queue_name")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"task_identifier"),"\ncolumns; these have been replaced with ",(0,i.kt)("inlineCode",{parentName:"li"},"job_queue_id")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"task_id")," which are\nboth ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"s"),(0,i.kt)("li",{parentName:"ul"},'WARNING: many of the "internal" SQL functions (',(0,i.kt)("inlineCode",{parentName:"li"},"get_job"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"fail_job"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"complete_job"),") have been moved to JS to allow for dynamic SQL generation for\nimproved performance/flexibility"),(0,i.kt)("li",{parentName:"ul"},"WARNING: most of the triggers have been removed (for performance reasons), so\nif you are inserting directly into the jobs table (don't do that, it's not a\nsupported interface!) make sure you update your code to be compatible")),(0,i.kt)("h3",{id:"features"},"Features"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'New "batch jobs" feature for merging payloads with a ',(0,i.kt)("inlineCode",{parentName:"li"},"job_key")," (see README)"),(0,i.kt)("li",{parentName:"ul"},"Significantly improved 'large jobs table' performance (e.g. when a large queue\nis locked, or there's a lot of jobs queued for task identifiers your worker\ninstance doesn't support, or a lot of failed jobs). Around 20x improvement in\nthis 'worst case' performance for real user workloads."),(0,i.kt)("li",{parentName:"ul"},"Added new (experimental) much faster ",(0,i.kt)("inlineCode",{parentName:"li"},"add_jobs")," batch API."),(0,i.kt)("li",{parentName:"ul"},"Fix error handling of cron issues in 'run' method."),(0,i.kt)("li",{parentName:"ul"},"CronItem.match can now accept either a pattern string or a matcher function"),(0,i.kt)("li",{parentName:"ul"},"Jobs that were locked more than 4 hours will be reattempted as before, however\nthey are slightly de-prioritised by virtue of having their ",(0,i.kt)("inlineCode",{parentName:"li"},"run_at")," updated,\ngiving interim jobs a chance to be executed (and lessening the impact of queue\nstalling through hanging tasks).")),(0,i.kt)("h2",{id:"v0131-bridge0"},"v0.13.1-bridge.0"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"TL;DR: if you want to use ",(0,i.kt)("a",{parentName:"strong",href:"https://worker.graphile.org/docs/pro"},"Worker Pro"),"\nto ease migration to v0.16.0, upgrade to this version for Worker Pro support.")),(0,i.kt)("p",null,'This release is a "bridge" release to make migration to v0.14.0 and v0.16.0\neasier. Since v0.14.0 and v0.16.0 include breaking database changes, no active\nworkers should be running when the migrations happen, and once the migrations\nhave happened older workers are no longer supported and their usage may lead to\nweird and undesirable behaviors.'),(0,i.kt)("p",null,'Normally we\'d recommend that you "scale to zero" before performing these kinds\nof migrations, to ensure that no older workers will be running against the DB at\nthe same time; however this release adds support for the (proprietary)\n',(0,i.kt)("a",{parentName:"p",href:"https://worker.graphile.org/docs/pro"},"Worker Pro plugin")," which (when used\nconsistently across your entire worker fleet) enables your workers to\ncoordinate, triggering legacy workers to cleanly shut down (and waiting for them\nto do so) before migrating the database. The Worker Pro plugin also details the\nintent to upgrade, meaning if new legacy workers start up in the interrim, they\nwill also not start looking for jobs since they know they will be out of date\nsoon. As soon as all running tasks have finished processing (or a configurable\ntimeout has elapsed) the migration will go ahead."),(0,i.kt)("p",null,"The Worker Pro plugin mentioned above is enabled by the addition of support for\n",(0,i.kt)("inlineCode",{parentName:"p"},"graphile-config"),", the standardized plugin and preset system for the entire\nGraphile suite. Thanks to this integration, we've been able to add a\nplugin/hooks system that you can use to customize the behavior of Worker\n(including implementing some of the behaviors described in the previous\nparagraph yourself, should you so desire)."),(0,i.kt)("p",null,"This release also adds a startup check that will abort startup if the database\nalready contains breaking migrations that are unsupported by the current worker\nversion, and a significant number of back-ported fixes and new features that\ndidn't require database migrations (including important fixes to the graceful\nshutdown system)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"--watch")," mode is no longer supported. We've removed this from\nv0.16.0 (see the release notes for that version), you should use ",(0,i.kt)("inlineCode",{parentName:"p"},"node --watch"),"\nor similar instead. This also removes ",(0,i.kt)("inlineCode",{parentName:"p"},"fauxRequire")," and all the problems that\nthat had."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": Node versions before v20 and Postgres versions before v12 are no\nlonger supported. (Node v18 ",(0,i.kt)("em",{parentName:"p"},"should")," work, but it segfaults when running the\ntests which is likely a jest/",(0,i.kt)("inlineCode",{parentName:"p"},"node --experimental-vm-modules")," issue which is\nunlikely affect you at runtime.)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixes graceful shutdown (both manually via ",(0,i.kt)("inlineCode",{parentName:"li"},".gracefulShutdown()")," or\n",(0,i.kt)("inlineCode",{parentName:"li"},".forcefulShutdown()")," and via signal handling)"),(0,i.kt)("li",{parentName:"ul"},"Removes ",(0,i.kt)("inlineCode",{parentName:"li"},"maxContinguousErrors")," setting which was poorly implemented and caused\nmore issues than it solved"),(0,i.kt)("li",{parentName:"ul"},"Tracks whether migrations are breaking or not, and:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"refuses to start if an unsupported breaking migration is present in the\ndatabase"),(0,i.kt)("li",{parentName:"ul"},"gracefully shuts down if another worker performs a breaking migration",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"NOTE: this is not sufficiently safe, it's just a backstop. If the\nmigration breaks completing or failing of jobs then your worker will be\nunable to release in-progress tasks even if they're finished; and the\nworker performing the migrations will not wait for legacy workers to\ncomplete. You should shut down your workers before upgrading, or use\nWorker Pro to handle the situation automatically for you."))))),(0,i.kt)("li",{parentName:"ul"},"Adds ",(0,i.kt)("inlineCode",{parentName:"li"},"graphile-config")," support for presets and plugins"),(0,i.kt)("li",{parentName:"ul"},"Adds more events and hooks"),(0,i.kt)("li",{parentName:"ul"},"Uses JS-ified SQL migrations to help workaround some bundling issues"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runTaskListOnce")," now uses a WorkerPool internally (to better integrate with\nthe gracefulShutdown logic)"),(0,i.kt)("li",{parentName:"ul"},"Fix ",(0,i.kt)("inlineCode",{parentName:"li"},"WorkerPool.promise")," to only resolve once everything is handled"),(0,i.kt)("li",{parentName:"ul"},"EXPERIMENTAL; see v0.16.0 for documentation:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Adds support for loading tasks from nested folders (e.g.\n",(0,i.kt)("inlineCode",{parentName:"li"},"tasks/foo/bar/baz.js")," will add support for a task with identifier\n",(0,i.kt)("inlineCode",{parentName:"li"},"foo/bar/baz"),")"),(0,i.kt)("li",{parentName:"ul"},"Adds support for turning executable files into tasks (i.e. a task written in\npython, Rust, or bash)"),(0,i.kt)("li",{parentName:"ul"},"Adds support for loading TypeScript tasks directly (no need to compile to\nJS, but if you do the JS will have priority)"),(0,i.kt)("li",{parentName:"ul"},"You may see warnings like\n",(0,i.kt)("inlineCode",{parentName:"li"},"WARNING: Failed to load task 'README.md' - no supported handlers found for path: '/path/to/tasks/README.md'")," -\nyou can ignore them (or you can move non-task files out of the ",(0,i.kt)("inlineCode",{parentName:"li"},"tasks"),"\nfolder)"),(0,i.kt)("li",{parentName:"ul"},"Undocumented, experimental and untested preliminary support for cancellable\njobs via ",(0,i.kt)("inlineCode",{parentName:"li"},"AbortSignal"),"; upgrade to v0.16.0+ if you want to actually use this"))),(0,i.kt)("li",{parentName:"ul"},"A huge number of internal changes")),(0,i.kt)("h2",{id:"v0130"},"v0.13.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Remove dependency on ",(0,i.kt)("inlineCode",{parentName:"li"},"pgcrypto")," database extension (thanks @noinkling)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If you have a pre-existing installation and wish to uninstall ",(0,i.kt)("inlineCode",{parentName:"li"},"pgcrypto")," you\nwill need to do so manually. This can be done by running\n",(0,i.kt)("inlineCode",{parentName:"li"},"DROP EXTENSION pgcrypto;")," ",(0,i.kt)("em",{parentName:"li"},"after")," updating to the latest schema."))),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"jobs.queue_name")," column no longer has a default value (this is only\nrelevant to people inserting into the table directly, which is not\nrecommended - use the ",(0,i.kt)("inlineCode",{parentName:"li"},"add_job")," helper)")),(0,i.kt)("h2",{id:"v0122"},"v0.12.2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fix issue when a connect error occurs whilst releasing worker (thanks\n@countcain)")),(0,i.kt)("h2",{id:"v0121"},"v0.12.1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Jobs with no queue are now released during graceful shutdown (thanks @olexiyb)")),(0,i.kt)("h2",{id:"v0120"},"v0.12.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Run shutdown actions in reverse order (rather than parallel) - more stable\nrelease"),(0,i.kt)("li",{parentName:"ul"},"When an error occurs with the new job listener, reconnection attempts now\nfollow an exponential back-off pattern"),(0,i.kt)("li",{parentName:"ul"},"Allow using Node.js time rather than PostgreSQL time (particularly useful for\ntests)"),(0,i.kt)("li",{parentName:"ul"},"Refactoring of some cron internals"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"noPreparedStatements")," to the docs")),(0,i.kt)("h2",{id:"v0114"},"v0.11.4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixes bug in crontab day-of-week check"),(0,i.kt)("li",{parentName:"ul"},"Exposes ",(0,i.kt)("inlineCode",{parentName:"li"},"parseCronItem")," helper")),(0,i.kt)("h2",{id:"v0113"},"v0.11.3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Restores ",(0,i.kt)("inlineCode",{parentName:"li"},"Logger")," export accidentally removed in v0.11.0")),(0,i.kt)("h2",{id:"v0112"},"v0.11.2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added support for wider range of ",(0,i.kt)("inlineCode",{parentName:"li"},"@types/pg")," dependency")),(0,i.kt)("h2",{id:"v0111"},"v0.11.1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Handles unexpected errors whilst PostgreSQL client is idle")),(0,i.kt)("h2",{id:"v0110"},"v0.11.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Export ",(0,i.kt)("inlineCode",{parentName:"li"},"getCronItems")," so library-mode users can watch the crontab file"),(0,i.kt)("li",{parentName:"ul"},"Replace ",(0,i.kt)("inlineCode",{parentName:"li"},"Logger")," with new\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/graphile/logger"},(0,i.kt)("inlineCode",{parentName:"a"},"@graphile/logger"))," module")),(0,i.kt)("h2",{id:"v0100"},"v0.10.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"No longer exit on SIGPIPE (Node will swallow this error code)"),(0,i.kt)("li",{parentName:"ul"},"Fix issue with error handling on PostgreSQL restart or ",(0,i.kt)("inlineCode",{parentName:"li"},"pg_terminate_backend")),(0,i.kt)("li",{parentName:"ul"},"Fix a potential unhandled promise rejection")),(0,i.kt)("h2",{id:"v090"},"v0.9.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'New (experimental) "cron" functionality for regularly scheduled jobs'),(0,i.kt)("li",{parentName:"ul"},"Replace jobs ordering index for improved performance (thanks @ben-pr-p)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"NOTE: this migration might take a moment if you have a large jobs table"))),(0,i.kt)("li",{parentName:"ul"},"New events system lets you monitor what's going on inside Graphile Worker"),(0,i.kt)("li",{parentName:"ul"},"New ",(0,i.kt)("inlineCode",{parentName:"li"},"job_key_mode")," setting; see README for full details, but summary:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"replace")," (existing behavior, i.e. debouncing)"),(0,i.kt)("li",{parentName:"ul"},"if set to ",(0,i.kt)("inlineCode",{parentName:"li"},"preserve_run_at")," it will preserve ",(0,i.kt)("inlineCode",{parentName:"li"},"run_at")," which effectively\nchanges it from debouncing to throttling"),(0,i.kt)("li",{parentName:"ul"},"if set to ",(0,i.kt)("inlineCode",{parentName:"li"},"unsafe_dedupe")," it will not update the attributes when an existing\njob with that job key exists, even if that job is already running"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"remove_job")," now prevents locked jobs from running again on error (and removes\ntheir key)"),(0,i.kt)("li",{parentName:"ul"},"Dependency updates")),(0,i.kt)("h2",{id:"v081"},"v0.8.1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fix issue with cyclic requires in watch mode")),(0,i.kt)("h2",{id:"v080"},"v0.8.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Track revision count for jobs (thanks @lukeramsden)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/graphile/worker#forbidden-flags"},'"Forbidden flags"'),"\nfeature for rate limiting (thanks @ben-pr-p)"),(0,i.kt)("li",{parentName:"ul"},"Fix incorrect description of priority - numerically smaller numbers run first\n(thanks @ben-pr-p)"),(0,i.kt)("li",{parentName:"ul"},"Add support for ",(0,i.kt)("inlineCode",{parentName:"li"},"PG*"),(0,i.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/libpq-envars.html"},"PostgreSQL envvars"))),(0,i.kt)("h2",{id:"v072"},"v0.7.2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"--no-prepared-statements")," flag to allow disabling of prepared statements\nfor pgBouncer compatibility."),(0,i.kt)("li",{parentName:"ul"},"Fix issue in watch mode where files ",(0,i.kt)("inlineCode",{parentName:"li"},"require()"),"d from inside a task are cached\npermanently.")),(0,i.kt)("p",null,"(v0.7.0 and v0.7.1 had issues with the experimental watch mode enhancements, so\nwere never upgraded to ",(0,i.kt)("inlineCode",{parentName:"p"},"@latest"),".)"),(0,i.kt)("h2",{id:"v061"},"v0.6.1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Official Docker image (thanks @madflow)")),(0,i.kt)("h2",{id:"v060"},"v0.6.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use target es2018 for TypeScript (Node v10 supports everything we need)\n(thanks @keepitsimple)"),(0,i.kt)("li",{parentName:"ul"},"When task promise is rejected with non-Error, use a fallback (thanks\n@parker-torii)"),(0,i.kt)("li",{parentName:"ul"},"Support ",(0,i.kt)("inlineCode",{parentName:"li"},"pg@8.x")," and hence Node v14 (thanks @purge)"),(0,i.kt)("li",{parentName:"ul"},"Fix mistake in README"),(0,i.kt)("li",{parentName:"ul"},"General maintenance")),(0,i.kt)("h2",{id:"v050"},"v0.5.0"),(0,i.kt)("p",null,'New "Administrative functions", ability to rename ',(0,i.kt)("inlineCode",{parentName:"p"},"graphile_worker")," schema, and\nsignificant overhaul of the codebase in preparation for going to v1.0."),(0,i.kt)("h3",{id:"v050-improvements"},"v0.5.0 improvements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Added "Administrative functions" to complete, reschedule or fail jobs in bulk\n(good for UIs)'),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"noHandleSignals")," option to disable our signal handling (if you enable\nthis, make sure you use your own signal handling!)"),(0,i.kt)("li",{parentName:"ul"},"Ability to rename ",(0,i.kt)("inlineCode",{parentName:"li"},"graphile_worker")," schema"),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"cosmiconfig")," for configuration (very few options support this\ncurrently)"),(0,i.kt)("li",{parentName:"ul"},"Decrease already negligible chance of worker ID collision (use\n",(0,i.kt)("inlineCode",{parentName:"li"},"crypto.randomBytes()")," rather than ",(0,i.kt)("inlineCode",{parentName:"li"},"Math.random()"),")")),(0,i.kt)("h3",{id:"v050-breaking-changes"},"v0.5.0 breaking changes:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"CLI users"),": no breaking changes."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Library users"),": none of the documented (in the README) APIs are affected,\nexcept ",(0,i.kt)("inlineCode",{parentName:"p"},"runTaskListOnce")," and some tiny tweaks to TypeScript types."),(0,i.kt)("p",null,"The ability to override the SQL schema means that everything in the codebase\nneeds to know this setting. To achieve this:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"all major APIs now accept ",(0,i.kt)("inlineCode",{parentName:"li"},"options")," as a configuration parameter"),(0,i.kt)("li",{parentName:"ul"},"where this was optional before it is now required"),(0,i.kt)("li",{parentName:"ul"},"where options was not the first argument, it has been moved to the first\nargument (for consistency)")),(0,i.kt)("p",null,"As such the following APIs (most of which are internal) have been changed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getTasks(taskPath, watch, logger)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"getTasks(options, taskPath, watch)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runTaskList(tasks, pgPool, options?)")," ->\n",(0,i.kt)("inlineCode",{parentName:"li"},"runTaskList(options, tasks, pgPool)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runTaskListOnce(tasks, client, options?)")," ->\n",(0,i.kt)("inlineCode",{parentName:"li"},"runTaskList(options, tasks, client)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"migrate(client)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"migrate(options, client)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"makeAddJob(withPgClient)")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"makeAddJob(options, withPgClient)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"makeJobHelpers(job, { withPgClient }, baseLogger)")," ->\n",(0,i.kt)("inlineCode",{parentName:"li"},"makeJobHelpers(options, job, { withPgClient, logger? })")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"makeNewWorker(tasks, withPgClient, options, continuous)")," ->\n",(0,i.kt)("inlineCode",{parentName:"li"},"makeNewWorker(options, tasks, withPgClient, continuous)"))),(0,i.kt)("p",null,"Also if you're a TypeScript user: we've renamed ",(0,i.kt)("inlineCode",{parentName:"p"},"WorkerSharedOptions")," to\n",(0,i.kt)("inlineCode",{parentName:"p"},"SharedOptions")," and added a new ",(0,i.kt)("inlineCode",{parentName:"p"},"WorkerSharedOptions"),". This is particularly\nrelevant if you're using the ",(0,i.kt)("inlineCode",{parentName:"p"},"WorkerUtils")," class. We've also tweaked what\noptions are available on each of these, but this is unlikely to affect you\nnegatively."),(0,i.kt)("h2",{id:"v040"},"v0.4.0"),(0,i.kt)("p",null,"Performance improvements and ability to efficiently queue jobs from JS."),(0,i.kt)("p",null,"BREAKING CHANGES:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"TypeScript:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"the ID of a job is a ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," (database ",(0,i.kt)("inlineCode",{parentName:"li"},"bigint"),"), we previously incorrectly\nstated it was a ",(0,i.kt)("inlineCode",{parentName:"li"},"number"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Helpers")," was renamed to ",(0,i.kt)("inlineCode",{parentName:"li"},"JobHelpers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TaskOptions")," was renamed to ",(0,i.kt)("inlineCode",{parentName:"li"},"TaskSpec")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queue_name")," is now nullable (leave it null for maximum parallel performance)"),(0,i.kt)("li",{parentName:"ul"},"when a job is modified using a ",(0,i.kt)("inlineCode",{parentName:"li"},"job_key"),", the ",(0,i.kt)("inlineCode",{parentName:"li"},"queue_name")," attribute is now\nreset like the other attributes")),(0,i.kt)("p",null,"WARNINGS:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The database schema has changed; your code should not depend on the database\nschema, only on the public interfaces (",(0,i.kt)("inlineCode",{parentName:"li"},"add_job"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"remove_job"),", etc), so this\nshouldn't be an issue.")),(0,i.kt)("p",null,"New features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Significantly enhanced performance",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Changes database schema such that a job_queue record is only added/checked\nwhen necessary"),(0,i.kt)("li",{parentName:"ul"},"Uses prepared statements"),(0,i.kt)("li",{parentName:"ul"},"Can override the PostgreSQL pool size on the CLI (via ",(0,i.kt)("inlineCode",{parentName:"li"},"--max-pool-size"),")"))),(0,i.kt)("li",{parentName:"ul"},"Dedicated API for queueing jobs from JavaScript/TypeScript (",(0,i.kt)("inlineCode",{parentName:"li"},"makeWorkerUtils"),"\n/ ",(0,i.kt)("inlineCode",{parentName:"li"},"quickAddJob"),"; @mrmurphy, @benjie #60)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--once")," now respects ",(0,i.kt)("inlineCode",{parentName:"li"},"--jobs"),", so it can run jobs in parallel"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jobKey")," is now available via TypeScript API (@tim-field, #78)")),(0,i.kt)("p",null,"Other:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overhauled the ",(0,i.kt)("inlineCode",{parentName:"li"},"perfTest")," script"),(0,i.kt)("li",{parentName:"ul"},"Upgraded dependencies")),(0,i.kt)("h2",{id:"v030-rc0"},"v0.3.0-rc.0"),(0,i.kt)("p",null,"v0.3.0-rc.0 was never released as v0.3.0 because we jumped to v0.4.0 too soon."),(0,i.kt)("p",null,"New features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"job_key")," enables existing jobs to be updated and deleted; can also be used\nfor de-duplication (@gregplaysguitar, @benjie #63)")),(0,i.kt)("p",null,"Fixes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fixes ",(0,i.kt)("inlineCode",{parentName:"li"},"runner.stop()")," (@MarkCBall, #66)")),(0,i.kt)("h2",{id:"v020"},"v0.2.0"),(0,i.kt)("p",null,"BREAKING CHANGES:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"debug")," task helper has been replaced with a ",(0,i.kt)("inlineCode",{parentName:"li"},"logger")," helper which is a\n",(0,i.kt)("inlineCode",{parentName:"li"},"Logger")," instance (see README)"),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"-1"),' shortcut for "run once" never worked; it has been removed'),(0,i.kt)("li",{parentName:"ul"},"Unrecognised command-line arguments will now cause an error to be thrown")),(0,i.kt)("p",null,"New features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"--schema-only")," CLI flag for installing/updating the schema (running\nmigrations) only"),(0,i.kt)("li",{parentName:"ul"},"It's now possible to override how logs are output by supplying a ",(0,i.kt)("inlineCode",{parentName:"li"},"logFactory"),"\n(see README)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," helper reduces boilerplate")),(0,i.kt)("p",null,"Fixes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We never needed ",(0,i.kt)("inlineCode",{parentName:"li"},"uuid-ossp")," so we've removed the requirement (you may want to\nremove the extension from your DB manually)")),(0,i.kt)("h2",{id:"v010"},"v0.1.0"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add database 'error' handler to avoid crashes (@madflow #26)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DATABASE_URL")," can now be used in place of ",(0,i.kt)("inlineCode",{parentName:"li"},"connectionString")," (@madflow,\n@benjie ",(0,i.kt)("del",{parentName:"li"},"#20")," #27)"),(0,i.kt)("li",{parentName:"ul"},"Improve documentation (@madflow, @archlemon, @benjie #11 #18 #31 #33)"),(0,i.kt)("li",{parentName:"ul"},"Improve testing (@madflow #19 #30)")),(0,i.kt)("h2",{id:"v010-alpha0"},"v0.1.0-alpha.0"),(0,i.kt)("p",null,"Now usable as a library as well as a CLI."),(0,i.kt)("p",null,"Changes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Renamed a number of internals",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"start")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"runTaskList")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"runAllJobs")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"runTaskListOnce")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"workerCount")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"concurrency")))),(0,i.kt)("li",{parentName:"ul"},"Add an easy way to run as a library (",(0,i.kt)("inlineCode",{parentName:"li"},"run")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"runOnce")," methods)"),(0,i.kt)("li",{parentName:"ul"},"CLI code reduced as it uses new library code"),(0,i.kt)("li",{parentName:"ul"},"Implemented linting"),(0,i.kt)("li",{parentName:"ul"},"Exported more methods")),(0,i.kt)("h2",{id:"v001-alpha7"},"v0.0.1-alpha.7"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add missing ",(0,i.kt)("inlineCode",{parentName:"li"},"tslib")," dependency")),(0,i.kt)("h2",{id:"v001-alpha6"},"v0.0.1-alpha.6"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"make poll interval configurable"),(0,i.kt)("li",{parentName:"ul"},"overhaul TypeScript types/interfaces"),(0,i.kt)("li",{parentName:"ul"},"more docs")),(0,i.kt)("h2",{id:"v001-alpha5"},"v0.0.1-alpha.5"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Fix casting (REQUIRES DB RESET)")),(0,i.kt)("h2",{id:"v001-alpha4"},"v0.0.1-alpha.4"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"add ",(0,i.kt)("inlineCode",{parentName:"li"},"addJob")," helper")),(0,i.kt)("h2",{id:"v001-alpha3"},"v0.0.1-alpha.3"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Travis CI"),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"index.js"))),(0,i.kt)("h2",{id:"v001-alpha2"},"v0.0.1-alpha.2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Docs")),(0,i.kt)("h2",{id:"v001-alpha1"},"v0.0.1-alpha.1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"More efficient job trigger"),(0,i.kt)("li",{parentName:"ul"},"Reduce latency")),(0,i.kt)("h2",{id:"v001-alpha0"},"v0.0.1-alpha.0"),(0,i.kt)("p",null,"Initial release."))}s.isMDXComponent=!0;const p={title:"Releases",sidebar_position:9999,toc_max_heading_level:2},u=void 0,d={type:"mdx",permalink:"/releases",source:"@site/src/pages/releases.mdx",title:"Releases",frontMatter:{title:"Releases",sidebar_position:9999,toc_max_heading_level:2}},m=l,k={toc:m},h="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(s,{mdxType:"ReleaseNotes"}))}c.isMDXComponent=!0}}]);